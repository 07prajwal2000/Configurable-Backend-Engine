{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Configurable Backend Engine","text":"<p>A powerful Low/No Code Tool to build Backend Rest APIs by using visual building blocks. Create complex API endpoints through an intuitive drag-and-drop interface without writing extensive code.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Visual API Builder: Design APIs using drag-and-drop blocks</li> <li>No Code Required: Build complex logic without programming knowledge</li> <li>Extensible Architecture: Add custom blocks for specialized functionality</li> <li>Real-time Execution: See your API changes instantly</li> <li>Type Safety: Built with TypeScript for reliability</li> <li>Database Integration: Seamless ORM integration with Drizzle</li> <li>Transaction Support: Atomic operations for data consistency</li> </ul>"},{"location":"#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Getting Started</li> <li>Blocks</li> <li>Built-in Blocks</li> <li>Custom Blocks</li> <li>Concepts</li> <li>API Reference</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The Configurable Backend Engine consists of several key components:</p>"},{"location":"#core-components","title":"Core Components","text":"<ul> <li>Block Engine: Executes the visual workflow defined by blocks</li> <li>Admin API: RESTful API for managing routes, blocks, and edges</li> <li>UI Editor: Web-based visual editor for designing APIs</li> <li>Database Layer: PostgreSQL with Drizzle ORM for data persistence</li> </ul>"},{"location":"#block-system","title":"Block System","text":"<p>Blocks are the fundamental building units that define API behavior:</p> <ul> <li>Entrypoint Block: Entry point for all API requests</li> <li>Processing Blocks: Transform, validate, and manipulate data</li> <li>Control Flow Blocks: Conditional logic and loops</li> <li>HTTP Blocks: Handle request/response operations</li> <li>Response Block: Final output generation</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<ul> <li>Rapid Prototyping: Quickly build and test API endpoints</li> <li>Business Logic Automation: Implement complex workflows visually</li> <li>Data Processing Pipelines: Create ETL processes without code</li> <li>API Orchestration: Combine multiple services and data sources</li> <li>Webhook Processing: Handle and transform webhook payloads</li> </ul>"},{"location":"#quick-start","title":"\ud83d\udee0\ufe0f Quick Start","text":"<ol> <li> <p>Install Dependencies <pre><code>npm install\n</code></pre></p> </li> <li> <p>Start Development Server <pre><code>npm run dev\n</code></pre></p> </li> <li> <p>Open Editor    Navigate to <code>http://localhost:3000</code> to start building your APIs</p> </li> <li> <p>Create Your First Route</p> </li> <li>Use the visual editor to drag and drop blocks</li> <li>Connect blocks to define your API logic</li> <li>Test your endpoint instantly</li> </ol>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<p>This documentation covers:</p> <ul> <li>Block Reference: Complete guide to all available blocks</li> <li>API Documentation: RESTful endpoints for programmatic access</li> <li>Configuration: Environment setup and customization</li> <li>Extensibility: How to create custom blocks</li> <li>Best Practices: Performance and security guidelines</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on:</p> <ul> <li>Adding new blocks</li> <li>Improving documentation</li> <li>Reporting bugs</li> <li>Feature requests</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"blocks/","title":"Introduction to Blocks","text":"<p>Blocks are the fundamental building pieces for creating configurable backend routes. They connect together like LEGO bricks to form complex API workflows through a visual, drag-and-drop interface.</p>"},{"location":"blocks/#block-connections","title":"\ud83d\udd17 Block Connections","text":"<p>Each block has connection points that define data flow and execution order:</p> Connection Type Color Purpose Source \ud83d\udd35 Blue Connects to next block and optionally passes input data Target \ud83d\udfe2 Green Accepts connection and input data from previous block Success \ud83d\udfe2 Green Executes on successful block completion Error \ud83d\udd34 Red Executes when block encounters an error <p></p>"},{"location":"blocks/#block-categories","title":"\ud83d\udce6 Block Categories","text":"<p>Blocks are organized into logical categories based on their functionality:</p>"},{"location":"blocks/#core-blocks-required","title":"\ud83d\udd30 Core Blocks (Required)","text":"<p>These blocks are essential for every API route:</p> <ul> <li>Entrypoint: Entry point for all requests</li> <li>Response: Final output generation</li> </ul>"},{"location":"blocks/#control-flow-blocks","title":"\ud83d\udd00 Control Flow Blocks","text":"<p>Manage execution flow and decision making:</p> <ul> <li>If: Conditional branching based on conditions</li> <li>For Loop: Traditional for loop with start/end/step</li> <li>ForEach Loop: Iterate over arrays or collections</li> </ul>"},{"location":"blocks/#http-blocks","title":"\ud83c\udf10 HTTP Blocks","text":"<p>Handle HTTP request/response operations:</p> <ul> <li>Get Header: Extract request headers</li> <li>Set Header: Set response headers</li> <li>Get Cookie: Extract request cookies</li> <li>Set Cookie: Set response cookies</li> <li>Get Param: Extract route/query parameters</li> <li>Get Request Body: Parse request body</li> </ul>"},{"location":"blocks/#data-processing-blocks","title":"\ud83d\udcdd Data Processing Blocks","text":"<p>Transform and manipulate data:</p> <ul> <li>JavaScript Runner: Execute custom JavaScript code</li> <li>Transformer: Transform objects using field mapping</li> <li>Array Operations: Manipulate arrays (push, pop, slice, etc.)</li> </ul>"},{"location":"blocks/#variable-management-blocks","title":"\ud83d\udcbe Variable Management Blocks","text":"<p>Store and retrieve data within request context:</p> <ul> <li>Set Variable: Store data in request context</li> <li>Get Variable: Retrieve data from request context</li> </ul>"},{"location":"blocks/#logging-debugging-blocks","title":"\ud83d\udcca Logging &amp; Debugging Blocks","text":"<p>Monitor and debug API execution:</p> <ul> <li>Console Log: Output to console for debugging</li> </ul>"},{"location":"blocks/#extension-blocks","title":"\ud83d\udd0c Extension Blocks","text":"<p>Specialized functionality:</p> <ul> <li>Interceptor: Intercept and modify request/response flow</li> </ul>"},{"location":"blocks/#how-blocks-work","title":"\ud83c\udfd7\ufe0f How Blocks Work","text":""},{"location":"blocks/#execution-flow","title":"Execution Flow","text":"<ol> <li>Entrypoint Block receives the initial request</li> <li>Data flows through connected blocks in sequence</li> <li>Each block processes input and produces output</li> <li>Response Block generates the final HTTP response</li> </ol>"},{"location":"blocks/#data-flow","title":"Data Flow","text":"<ul> <li>Blocks receive input from their target connection</li> <li>Processing occurs based on block configuration</li> <li>Output is sent to the next block via source connection</li> <li>Variables can be set/retrieved across the entire flow</li> </ul>"},{"location":"blocks/#error-handling","title":"Error Handling","text":"<ul> <li>Blocks can have success and error paths</li> <li>Failed blocks can continue execution or stop the flow</li> <li>Error information is propagated through the error connection</li> </ul>"},{"location":"blocks/#creating-custom-blocks","title":"\ud83c\udfa8 Creating Custom Blocks","text":"<p>The Configurable Backend Engine supports custom block development:</p> <pre><code>import { BaseBlock, BlockOutput } from \"../baseBlock\";\n\nexport class CustomBlock extends BaseBlock {\n  async executeAsync(params?: any): Promise&lt;BlockOutput&gt; {\n    // Custom logic here\n    return {\n      successful: true,\n      output: processedData,\n      next: this.next,\n      continueIfFail: true\n    };\n  }\n}\n</code></pre>"},{"location":"blocks/#block-configuration","title":"\ud83d\udccb Block Configuration","text":"<p>Each block can be configured through:</p> <ul> <li>Input Parameters: Define block behavior</li> <li>Connection Settings: Control data flow</li> <li>Validation Rules: Ensure data integrity</li> <li>Error Handling: Define failure responses</li> </ul>"},{"location":"blocks/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/#design-principles","title":"Design Principles","text":"<ul> <li>Keep blocks focused on single responsibilities</li> <li>Use meaningful names and descriptions</li> <li>Provide clear input/output documentation</li> <li>Handle errors gracefully</li> </ul>"},{"location":"blocks/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Avoid heavy computations in frequently used blocks</li> <li>Use caching for expensive operations</li> <li>Minimize database queries within blocks</li> <li>Consider async operations for I/O tasks</li> </ul>"},{"location":"blocks/#security-guidelines","title":"Security Guidelines","text":"<ul> <li>Validate all input parameters</li> <li>Sanitize data before processing</li> <li>Use parameterized queries for database operations</li> <li>Implement proper error handling without exposing sensitive information</li> </ul>"},{"location":"blocks/#block-reference","title":"\ud83d\udcda Block Reference","text":"<p>For detailed information about each block, see the individual block documentation linked above. Each page includes:</p> <ul> <li>Block purpose and use cases</li> <li>Configuration options</li> <li>Input/output specifications</li> <li>Example usage</li> <li>Error handling</li> </ul>"},{"location":"blocks/entrypoint/","title":"Entrypoint Block","text":"<p>This is the default and exists only one in any request. It is the starting point of the request, which takes care of parsing request body, query/route params, and headers. </p> <p></p>"},{"location":"blocks/entrypoint/#connections","title":"Connections","text":"Type Purpose Source The body of the request will be passed to the next block <p>Note</p> <p>All the request's metadata such as query params, route params, headers, and cookies will be available as a global variable. See request's context for more details.</p>"},{"location":"blocks/response/","title":"Response/Output Block","text":"<p>This block is used to return the response to the router. Whatever data which is sent into the param block will be the body of that request. </p>","tags":["Built-in","Misc"]},{"location":"blocks/response/#connections","title":"Connections","text":"Type Purpose Target The body of the request must be passed from the previous block as an input to this block. <p>In addition to the body, it is also possible to set any headers to the request. To set any headers to the request, it is required to set the <code>responseHttpHeaders</code> variable in the context. Below is an example to set a header, but this is being run inside a JS Runner block.</p> <pre><code>responseHttpHeaders[\"Content-Type\"] = \"application/json\";\n</code></pre> <p>Note</p> <p>It is not required to initialize the <code>responseHttpHeaders</code> in vars, doing so will override the existing headers.</p>","tags":["Built-in","Misc"]},{"location":"blocks/built-in/arrayops/","title":"Array Operations Block","text":"<p>The Array Operations block provides essential array manipulation functionality within your API workflows. It allows you to perform common array operations like adding, removing, and modifying elements in arrays stored in the request context.</p>"},{"location":"blocks/built-in/arrayops/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is designed to work with arrays stored as variables in the request context. It supports the most commonly used array operations and integrates seamlessly with other blocks in your workflow.</p>"},{"location":"blocks/built-in/arrayops/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/arrayops/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>operation</code> <code>enum</code> \u2705 The array operation to perform <code>value</code> <code>any</code> \u26a0\ufe0f Value for operations that require input <code>useParamAsInput</code> <code>boolean</code> \u274c Use input parameter as the value <code>datasource</code> <code>string</code> \u2705 Variable name containing the target array"},{"location":"blocks/built-in/arrayops/#available-operations","title":"Available Operations","text":"Operation Description Requires Value Example <code>push</code> Add element to end of array \u2705 <code>array.push(\"newItem\")</code> <code>pop</code> Remove last element from array \u274c <code>array.pop()</code> <code>shift</code> Remove first element from array \u274c <code>array.shift()</code> <code>unshift</code> Add element to beginning of array \u2705 <code>array.unshift(\"firstItem\")</code>"},{"location":"blocks/built-in/arrayops/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Input Validation: Validates that the datasource contains a valid array</li> <li>Operation Execution: Performs the specified array operation</li> <li>JavaScript Evaluation: Evaluates JavaScript expressions for dynamic values</li> <li>Output Generation: Returns the modified array as output</li> </ol>"},{"location":"blocks/built-in/arrayops/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/arrayops/#basic-array-operations","title":"Basic Array Operations","text":"<pre><code>{\n  \"operation\": \"push\",\n  \"value\": \"newItem\",\n  \"datasource\": \"myArray\"\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#using-javascript-expressions","title":"Using JavaScript Expressions","text":"<pre><code>{\n  \"operation\": \"push\",\n  \"value\": \"js:new Date().toISOString()\",\n  \"datasource\": \"timestamps\"\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#using-input-parameters","title":"Using Input Parameters","text":"<pre><code>{\n  \"operation\": \"push\",\n  \"useParamAsInput\": true,\n  \"datasource\": \"userList\"\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/arrayops/#input","title":"Input","text":"<ul> <li>Target: Receives input data when <code>useParamAsInput</code> is enabled</li> </ul>"},{"location":"blocks/built-in/arrayops/#output","title":"Output","text":"<ul> <li>Source: Sends the modified array to the next block</li> <li>Success: Executes when operation completes successfully</li> <li>Error: Executes when operation fails</li> </ul>"},{"location":"blocks/built-in/arrayops/#error-handling","title":"\u26a0\ufe0f Error Handling","text":"<p>The block handles several error conditions:</p> <ul> <li>Invalid Datasource: When the specified variable is not an array</li> <li>Missing Value: When a required value is not provided</li> <li>JavaScript Errors: When JavaScript expressions fail to evaluate</li> </ul>"},{"location":"blocks/built-in/arrayops/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"successful\": false,\n  \"error\": \"datasource is not an array\",\n  \"continueIfFail\": false\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/arrayops/#user-management","title":"User Management","text":"<pre><code>// Add new user to users array\n{\n  \"operation\": \"push\",\n  \"value\": {\"name\": \"John\", \"email\": \"john@example.com\"},\n  \"datasource\": \"users\"\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#queue-processing","title":"Queue Processing","text":"<pre><code>// Remove first item from processing queue\n{\n  \"operation\": \"shift\",\n  \"datasource\": \"processingQueue\"\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#data-collection","title":"Data Collection","text":"<pre><code>// Collect form submissions\n{\n  \"operation\": \"push\",\n  \"useParamAsInput\": true,\n  \"datasource\": \"formSubmissions\"\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/arrayops/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Use appropriate operations for your use case</li> <li>Consider array size when performing operations</li> <li>Avoid frequent operations on large arrays</li> </ul>"},{"location":"blocks/built-in/arrayops/#data-validation","title":"Data Validation","text":"<ul> <li>Always validate array existence before operations</li> <li>Check data types when adding elements</li> <li>Handle edge cases (empty arrays, etc.)</li> </ul>"},{"location":"blocks/built-in/arrayops/#error-handling_1","title":"Error Handling","text":"<ul> <li>Implement proper error paths in your workflow</li> <li>Log errors for debugging purposes</li> <li>Provide meaningful error messages</li> </ul>"},{"location":"blocks/built-in/arrayops/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>Set Variable: Store arrays in context</li> <li>Get Variable: Retrieve arrays from context</li> <li>JavaScript Runner: Advanced array manipulation</li> <li>ForEach Loop: Iterate over array elements</li> </ul>"},{"location":"blocks/built-in/arrayops/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/arrayops/#input-schema","title":"Input Schema","text":"<pre><code>{\n  operation: \"push\" | \"pop\" | \"shift\" | \"unshift\",\n  value?: any,\n  useParamAsInput?: boolean,\n  datasource: string\n}\n</code></pre>"},{"location":"blocks/built-in/arrayops/#output-schema","title":"Output Schema","text":"<p>```typescript {   successful: boolean,   output: any[],   next?: string,   error?: string,   continueIfFail: boolean }</p>"},{"location":"blocks/built-in/console/","title":"Console Log Block","text":"<p>The Console Log block provides logging functionality for debugging and monitoring API workflows. It outputs messages to the console with different log levels and includes contextual information like timestamps and request paths.</p>"},{"location":"blocks/built-in/console/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is designed for development and debugging purposes, allowing you to log messages, variables, and execution flow information to the console. It's particularly useful for:</p> <ul> <li>Debugging API workflows</li> <li>Monitoring execution flow</li> <li>Logging important events</li> <li>Development and testing</li> </ul>"},{"location":"blocks/built-in/console/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/console/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>message</code> <code>string</code> \u274c Custom message to log (optional) <code>level</code> <code>enum</code> \u2705 Log level: <code>info</code>, <code>warn</code>, <code>error</code>"},{"location":"blocks/built-in/console/#available-log-levels","title":"Available Log Levels","text":"Level Description Use Case <code>info</code> General information Normal operations, milestones <code>warn</code> Warning messages Non-critical issues, deprecations <code>error</code> Error messages Failures, exceptions, critical issues"},{"location":"blocks/built-in/console/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Input Validation: Validates log level and message format</li> <li>Message Formatting: Formats message with timestamp, path, and level</li> <li>JavaScript Evaluation: Evaluates JavaScript expressions in messages</li> <li>Console Output: Outputs formatted message to appropriate console method</li> <li>Flow Continuation: Passes input data to next block</li> </ol>"},{"location":"blocks/built-in/console/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/console/#basic-logging","title":"Basic Logging","text":"<pre><code>{\n  \"level\": \"info\",\n  \"message\": \"Processing user request\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#logging-with-variables","title":"Logging with Variables","text":"<pre><code>{\n  \"level\": \"info\",\n  \"message\": \"User ID: js:context.vars.userId\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#error-logging","title":"Error Logging","text":"<pre><code>{\n  \"level\": \"error\",\n  \"message\": \"Failed to process payment\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#using-input-parameters","title":"Using Input Parameters","text":"<pre><code>{\n  \"level\": \"info\"\n}\n</code></pre> <p>When no message is provided, the block will log the input parameters.</p>"},{"location":"blocks/built-in/console/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/console/#input","title":"Input","text":"<ul> <li>Target: Receives input data to be logged if no custom message is provided</li> </ul>"},{"location":"blocks/built-in/console/#output","title":"Output","text":"<ul> <li>Source: Sends input data to next block unchanged</li> <li>Success: Always executes (logging doesn't fail)</li> <li>Error: Never executes (block always succeeds)</li> </ul>"},{"location":"blocks/built-in/console/#log-output-format","title":"\ud83d\udcca Log Output Format","text":"<p>The block formats log messages with the following structure:</p> <pre><code>LEVEL-PATH-DATE TIME\nMessage content\n</code></pre>"},{"location":"blocks/built-in/console/#example-output","title":"Example Output","text":"<pre><code>INFO-/api/users-2024-01-15 14:30:25\nProcessing user registration for: john@example.com\n\nWARN-/api/orders-2024-01-15 14:31:10\nOrder amount exceeds normal range: 15000\n\nERROR-/api/payments-2024-01-15 14:32:45\nPayment processing failed: Invalid card number\n</code></pre>"},{"location":"blocks/built-in/console/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/console/#development-debugging","title":"Development Debugging","text":"<pre><code>{\n  \"level\": \"info\",\n  \"message\": \"js:JSON.stringify(context.vars, null, 2)\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#request-monitoring","title":"Request Monitoring","text":"<pre><code>{\n  \"level\": \"info\",\n  \"message\": \"Request received from: js:context.vars.getHeader('User-Agent')\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#error-tracking","title":"Error Tracking","text":"<pre><code>{\n  \"level\": \"error\",\n  \"message\": \"Database connection failed\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>{\n  \"level\": \"info\",\n  \"message\": \"js:`Processing completed in: ${Date.now() - context.vars.startTime}ms`\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/console/#log-levels","title":"Log Levels","text":"<ul> <li>Use <code>info</code> for general information and milestones</li> <li>Use <code>warn</code> for potential issues that don't stop execution</li> <li>Use <code>error</code> for failures and exceptions</li> </ul>"},{"location":"blocks/built-in/console/#message-content","title":"Message Content","text":"<ul> <li>Keep messages descriptive but concise</li> <li>Include relevant context and identifiers</li> <li>Use consistent formatting across your API</li> </ul>"},{"location":"blocks/built-in/console/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Remove or disable console blocks in production</li> <li>Use conditional logic to enable/disable logging</li> <li>Avoid logging sensitive information</li> </ul>"},{"location":"blocks/built-in/console/#javascript-expressions","title":"JavaScript Expressions","text":"<ul> <li>Use JavaScript expressions for dynamic content</li> <li>Ensure expressions are safe and don't throw errors</li> <li>Test expressions thoroughly during development</li> </ul>"},{"location":"blocks/built-in/console/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>Set Variable: Store data for logging</li> <li>Get Variable: Retrieve data to log</li> <li>JavaScript Runner: Complex logging logic</li> <li>If: Conditional logging based on conditions</li> </ul>"},{"location":"blocks/built-in/console/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/console/#input-schema","title":"Input Schema","text":"<pre><code>{\n  message?: string,\n  level: \"info\" | \"warn\" | \"error\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,     // Always true\n  output: any,            // Input data unchanged\n  next?: string,\n  continueIfFail: boolean // Always true\n}\n</code></pre>"},{"location":"blocks/built-in/console/#context-integration","title":"Context Integration","text":"<p>The block integrates with the request context to provide:</p> <ul> <li>Request Path: Current API endpoint path</li> <li>Timestamp: ISO 8601 formatted date and time</li> <li>JavaScript VM: For evaluating dynamic expressions</li> <li>Context Variables: Access to stored data</li> </ul>"},{"location":"blocks/built-in/console/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/console/#structured-logging","title":"Structured Logging","text":"<pre><code>{\n  \"level\": \"info\",\n  \"message\": \"js:JSON.stringify({\n    userId: context.vars.userId,\n    action: 'login',\n    timestamp: new Date().toISOString(),\n    userAgent: context.vars.getHeader('User-Agent')\n  }, null, 2)\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#conditional-logging","title":"Conditional Logging","text":"<p>Combine with If blocks for conditional logging:</p> <pre><code>// If block condition\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.environment\",\n      \"rhs\": \"development\",\n      \"operator\": \"equals\"\n    }\n  ]\n}\n\n// Console block (only executes in development)\n{\n  \"level\": \"info\",\n  \"message\": \"Debug information\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#performance-timing","title":"Performance Timing","text":"<pre><code>// Start timing\n{\n  \"level\": \"info\",\n  \"message\": \"js:context.vars.startTime = Date.now()\"\n}\n\n// End timing\n{\n  \"level\": \"info\",\n  \"message\": \"js:`Operation completed in: ${Date.now() - context.vars.startTime}ms`\"\n}\n</code></pre>"},{"location":"blocks/built-in/console/#production-considerations","title":"\u26a0\ufe0f Production Considerations","text":""},{"location":"blocks/built-in/console/#security","title":"Security","text":"<ul> <li>Remove sensitive data from log messages</li> <li>Avoid logging passwords, tokens, or PII</li> <li>Sanitize user inputs before logging</li> </ul>"},{"location":"blocks/built-in/console/#performance","title":"Performance","text":"<ul> <li>Logging can impact performance in high-traffic scenarios</li> <li>Consider log levels and conditional logging</li> <li>Use async logging for better performance</li> </ul>"},{"location":"blocks/built-in/console/#monitoring","title":"Monitoring","text":"<ul> <li>Integrate with logging services (CloudWatch, DataDog, etc.)</li> <li>Set up log aggregation and analysis</li> <li>Monitor error rates and patterns</li> </ul>"},{"location":"blocks/built-in/console/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"blocks/built-in/console/#common-issues","title":"Common Issues","text":"<p>Logs not appearing: Check console output destination and log levels</p> <p>JavaScript errors: Validate JavaScript expressions before deployment</p> <p>Performance impact: Monitor execution times and optimize logging frequency</p> <p>Missing context: Ensure context variables are set before logging</p> <p>The Console Log block is an essential tool for development and debugging, providing visibility into your API workflows and helping you monitor execution flow and identify issues.</p>"},{"location":"blocks/built-in/for/","title":"For Loop Block","text":"<p>The For Loop block provides traditional looping functionality with configurable start, end, and step values. It allows you to execute a sequence of blocks repeatedly for a specified number of iterations.</p>"},{"location":"blocks/built-in/for/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is designed for scenarios where you need to perform repetitive operations a specific number of times. It's particularly useful for:</p> <ul> <li>Processing arrays with known indices</li> <li>Generating sequences of data</li> <li>Performing batch operations</li> <li>Implementing countdowns or counters</li> </ul>"},{"location":"blocks/built-in/for/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/for/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>start</code> <code>number</code> | <code>string</code> \u2705 Starting value of the loop <code>end</code> <code>number</code> | <code>string</code> \u2705 Ending value (exclusive) <code>step</code> <code>number</code> | <code>string</code> \u274c Increment value (default: 1) <code>block</code> <code>string</code> \u274c ID of the block to execute in each iteration"},{"location":"blocks/built-in/for/#parameter-types","title":"Parameter Types","text":"<ul> <li>Numbers: Direct numeric values (<code>10</code>, <code>0</code>, <code>2</code>)</li> <li>Strings: JavaScript expressions prefixed with <code>js:</code> (<code>js:i * 2</code>, <code>js:context.vars.maxValue</code>)</li> </ul>"},{"location":"blocks/built-in/for/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Parameter Evaluation: Evaluates start, end, and step values</li> <li>Loop Initialization: Sets up the loop counter</li> <li>Iteration Execution: Runs the specified block for each iteration</li> <li>Counter Update: Increments counter by step value</li> <li>Termination Check: Continues until counter reaches end value</li> </ol>"},{"location":"blocks/built-in/for/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/for/#basic-numeric-loop","title":"Basic Numeric Loop","text":"<pre><code>{\n  \"start\": 0,\n  \"end\": 10,\n  \"step\": 1,\n  \"block\": \"process-item\"\n}\n</code></pre> <p>This will execute the \"process-item\" block 10 times (iterations 0 through 9).</p>"},{"location":"blocks/built-in/for/#loop-with-custom-step","title":"Loop with Custom Step","text":"<pre><code>{\n  \"start\": 0,\n  \"end\": 100,\n  \"step\": 10,\n  \"block\": \"batch-process\"\n}\n</code></pre> <p>This will execute every 10th iteration: 0, 10, 20, ..., 90.</p>"},{"location":"blocks/built-in/for/#dynamic-end-value","title":"Dynamic End Value","text":"<pre><code>{\n  \"start\": 1,\n  \"end\": \"js:context.vars.itemCount\",\n  \"step\": 1,\n  \"block\": \"validate-item\"\n}\n</code></pre> <p>The end value is determined dynamically from a context variable.</p>"},{"location":"blocks/built-in/for/#javascript-expressions","title":"JavaScript Expressions","text":"<pre><code>{\n  \"start\": \"js:context.vars.startIndex\",\n  \"end\": \"js:context.vars.startIndex + 5\",\n  \"step\": \"js:Math.max(1, context.vars.stepSize)\",\n  \"block\": \"calculate-result\"\n}\n</code></pre> <p>All parameters can use JavaScript expressions for dynamic values.</p>"},{"location":"blocks/built-in/for/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/for/#input","title":"Input","text":"<ul> <li>Target: Receives input data passed to each iteration</li> </ul>"},{"location":"blocks/built-in/for/#output","title":"Output","text":"<ul> <li>Source: Sends the final result after all iterations complete</li> <li>Success: Executes when loop completes successfully</li> <li>Error: Executes if loop encounters an error</li> </ul>"},{"location":"blocks/built-in/for/#loop-execution","title":"\ud83d\udd04 Loop Execution","text":""},{"location":"blocks/built-in/for/#iteration-process","title":"Iteration Process","text":"<ol> <li>Counter Check: Verify if current counter is less than end value</li> <li>Block Execution: Execute the specified block with current counter value</li> <li>Result Collection: Optionally collect results from each iteration</li> <li>Counter Increment: Add step value to counter</li> <li>Repeat: Continue until termination condition is met</li> </ol>"},{"location":"blocks/built-in/for/#data-flow","title":"Data Flow","text":"<ul> <li>Input Data: Passed to each iteration of the child block</li> <li>Iteration Value: Current counter value available as <code>i</code> parameter</li> <li>Result Accumulation: Results can be collected in context variables</li> </ul>"},{"location":"blocks/built-in/for/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/for/#array-processing-by-index","title":"Array Processing by Index","text":"<pre><code>{\n  \"start\": 0,\n  \"end\": \"js:context.vars.items.length\",\n  \"step\": 1,\n  \"block\": \"process-array-item\"\n}\n</code></pre> <p>Process each element of an array by its index.</p>"},{"location":"blocks/built-in/for/#batch-operations","title":"Batch Operations","text":"<pre><code>{\n  \"start\": 0,\n  \"end\": \"js:Math.ceil(context.vars.totalRecords / 100)\",\n  \"step\": 1,\n  \"block\": \"process-batch\"\n}\n</code></pre> <p>Process records in batches of 100.</p>"},{"location":"blocks/built-in/for/#countdown-timer","title":"Countdown Timer","text":"<pre><code>{\n  \"start\": 10,\n  \"end\": 0,\n  \"step\": -1,\n  \"block\": \"update-timer\"\n}\n</code></pre> <p>Create a countdown from 10 to 0.</p>"},{"location":"blocks/built-in/for/#data-generation","title":"Data Generation","text":"<pre><code>{\n  \"start\": 1,\n  \"end\": 101,\n  \"step\": 1,\n  \"block\": \"generate-report\"\n}\n</code></pre> <p>Generate reports for items 1 through 100.</p>"},{"location":"blocks/built-in/for/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/for/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Keep loop bodies lightweight</li> <li>Avoid deep nesting of loops</li> <li>Consider memory usage for large iteration counts</li> <li>Use appropriate step sizes to reduce iterations</li> </ul>"},{"location":"blocks/built-in/for/#error-handling","title":"Error Handling","text":"<ul> <li>Implement error handling in the looped block</li> <li>Use context variables to track loop progress</li> <li>Handle edge cases (empty ranges, invalid parameters)</li> </ul>"},{"location":"blocks/built-in/for/#variable-management","title":"Variable Management","text":"<ul> <li>Use context variables to accumulate results</li> <li>Track loop progress and status</li> <li>Clean up temporary variables after completion</li> </ul>"},{"location":"blocks/built-in/for/#javascript-expressions_1","title":"JavaScript Expressions","text":"<ul> <li>Validate expressions before deployment</li> <li>Ensure expressions don't have side effects</li> <li>Use context variables for complex calculations</li> </ul>"},{"location":"blocks/built-in/for/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>ForEach Loop: Iterate over array elements</li> <li>Set Variable: Store loop results</li> <li>Get Variable: Access loop data</li> <li>JavaScript Runner: Complex loop logic</li> <li>Array Operations: Manipulate arrays within loops</li> </ul>"},{"location":"blocks/built-in/for/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/for/#input-schema","title":"Input Schema","text":"<pre><code>{\n  start: number | string,\n  end: number | string,\n  step?: number | string,\n  block?: string\n}\n</code></pre>"},{"location":"blocks/built-in/for/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,\n  output: any,\n  next?: string,\n  error?: string,\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/for/#context-integration","title":"Context Integration","text":"<p>The loop block integrates with the execution engine to:</p> <ul> <li>Execute Child Blocks: Run specified blocks for each iteration</li> <li>Pass Parameters: Send current counter value to child blocks</li> <li>Handle Errors: Propagate errors from child block executions</li> <li>Maintain State: Preserve context across iterations</li> </ul>"},{"location":"blocks/built-in/for/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/for/#nested-loops","title":"Nested Loops","text":"<pre><code>// Outer loop\n{\n  \"start\": 0,\n  \"end\": 3,\n  \"block\": \"inner-loop-setup\"\n}\n\n// Inner loop (called from outer)\n{\n  \"start\": 0,\n  \"end\": \"js:context.vars.innerCount\",\n  \"block\": \"process-matrix-item\"\n}\n</code></pre>"},{"location":"blocks/built-in/for/#dynamic-loop-control","title":"Dynamic Loop Control","text":"<pre><code>{\n  \"start\": \"js:context.vars.currentPosition\",\n  \"end\": \"js:context.vars.targetPosition\",\n  \"step\": \"js:context.vars.direction === 'forward' ? 1 : -1\",\n  \"block\": \"move-position\"\n}\n</code></pre>"},{"location":"blocks/built-in/for/#result-accumulation","title":"Result Accumulation","text":"<pre><code>// Initialize results array\n{\n  \"key\": \"loopResults\",\n  \"value\": \"js:[]\"\n}\n\n// Loop configuration\n{\n  \"start\": 0,\n  \"end\": 10,\n  \"block\": \"accumulate-result\"\n}\n\n// In the accumulate-result block:\n{\n  \"key\": \"loopResults\",\n  \"value\": \"js:[...context.vars.loopResults, `Result ${i}`]\"\n}\n</code></pre>"},{"location":"blocks/built-in/for/#conditional-loop-execution","title":"Conditional Loop Execution","text":"<pre><code>// Only execute if condition is met\n{\n  \"start\": \"js:context.vars.shouldLoop ? 0 : 1\",\n  \"end\": \"js:context.vars.shouldLoop ? context.vars.loopCount : 1\",\n  \"block\": \"conditional-process\"\n}\n</code></pre>"},{"location":"blocks/built-in/for/#error-handling_1","title":"\u26a0\ufe0f Error Handling","text":""},{"location":"blocks/built-in/for/#common-issues","title":"Common Issues","text":"<p>Infinite Loops: Ensure end condition is reachable <pre><code>// Problematic: step is 0 or wrong direction\n{\n  \"start\": 0,\n  \"end\": 10,\n  \"step\": 0  // Will cause infinite loop\n}\n</code></pre></p> <p>Invalid Parameters: Validate input values <pre><code>// Problematic: start &gt; end with positive step\n{\n  \"start\": 10,\n  \"end\": 0,\n  \"step\": 1  // Will never execute\n}\n</code></pre></p> <p>JavaScript Errors: Handle expression failures <pre><code>// Problematic: undefined variable\n{\n  \"end\": \"js:context.vars.undefinedVar.length\"  // Will throw error\n}\n</code></pre></p>"},{"location":"blocks/built-in/for/#error-recovery","title":"Error Recovery","text":"<pre><code>// Implement error boundaries\n{\n  \"start\": 0,\n  \"end\": \"js:context.vars.safeEnd || 10\",\n  \"step\": 1,\n  \"block\": \"safe-operation\"\n}\n</code></pre>"},{"location":"blocks/built-in/for/#loop-variables","title":"\ud83d\udd0d Loop Variables","text":""},{"location":"blocks/built-in/for/#available-in-child-blocks","title":"Available in Child Blocks","text":"<ul> <li><code>i</code>: Current iteration counter</li> <li><code>params</code>: Input data passed to the loop</li> <li>Context Variables: All existing context variables</li> </ul>"},{"location":"blocks/built-in/for/#example-child-block-usage","title":"Example Child Block Usage","text":"<pre><code>// Access loop counter\nconst currentIndex = i;\n\n// Access input data\nconst inputData = params;\n\n// Store iteration result\ncontext.vars.results = context.vars.results || [];\ncontext.vars.results.push(`Iteration ${i}: ${inputData}`);\n</code></pre> <p>The For Loop block provides powerful iteration capabilities, allowing you to execute blocks repeatedly with precise control over the iteration process and access to loop state.</p>"},{"location":"blocks/built-in/foreach/","title":"ForEach Loop Block","text":"<p>The ForEach Loop block provides iteration over array elements, executing a specified block for each item in an array. It's designed for processing collections where you need to perform operations on each element.</p>"},{"location":"blocks/built-in/foreach/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is ideal for scenarios where you need to process each item in a collection or array. It's particularly useful for:</p> <ul> <li>Processing user lists or data collections</li> <li>Validating array elements</li> <li>Transforming data structures</li> <li>Performing batch operations on multiple items</li> </ul>"},{"location":"blocks/built-in/foreach/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/foreach/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>values</code> <code>array</code> \u2705 Array of items to iterate over <code>useParam</code> <code>boolean</code> \u274c Use input parameter as the array <code>block</code> <code>string</code> \u274c ID of the block to execute for each item"},{"location":"blocks/built-in/foreach/#parameter-details","title":"Parameter Details","text":"<ul> <li><code>values</code>: Static array defined in block configuration</li> <li><code>useParam</code>: When <code>true</code>, uses the input data as the array instead of the configured values</li> <li><code>block</code>: The block to execute for each array element</li> </ul>"},{"location":"blocks/built-in/foreach/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Array Resolution: Determines whether to use configured values or input parameter</li> <li>Validation: Ensures the input is a valid array</li> <li>Iteration Setup: Prepares for iteration over array elements</li> <li>Element Processing: Executes specified block for each element</li> <li>Result Collection: Optionally collects results from each iteration</li> </ol>"},{"location":"blocks/built-in/foreach/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/foreach/#static-array-iteration","title":"Static Array Iteration","text":"<pre><code>{\n  \"values\": [\"apple\", \"banana\", \"cherry\"],\n  \"block\": \"process-fruit\"\n}\n</code></pre> <p>This will execute \"process-fruit\" block for each fruit in the array.</p>"},{"location":"blocks/built-in/foreach/#dynamic-array-from-parameters","title":"Dynamic Array from Parameters","text":"<pre><code>{\n  \"useParam\": true,\n  \"block\": \"validate-user\"\n}\n</code></pre> <p>Uses the input data as the array to iterate over.</p>"},{"location":"blocks/built-in/foreach/#user-processing","title":"User Processing","text":"<pre><code>{\n  \"values\": [\n    {\"id\": 1, \"name\": \"John\"},\n    {\"id\": 2, \"name\": \"Jane\"},\n    {\"id\": 3, \"name\": \"Bob\"}\n  ],\n  \"block\": \"send-notification\"\n}\n</code></pre> <p>Process each user object individually.</p>"},{"location":"blocks/built-in/foreach/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/foreach/#input","title":"Input","text":"<ul> <li>Target: Receives input data (used as array when <code>useParam</code> is true)</li> </ul>"},{"location":"blocks/built-in/foreach/#output","title":"Output","text":"<ul> <li>Source: Sends final result after processing all elements</li> <li>Success: Executes when all iterations complete successfully</li> <li>Error: Executes if an error occurs during iteration</li> </ul>"},{"location":"blocks/built-in/foreach/#iteration-process","title":"\ud83d\udd04 Iteration Process","text":""},{"location":"blocks/built-in/foreach/#element-processing","title":"Element Processing","text":"<ol> <li>Element Access: Retrieves current array element</li> <li>Block Execution: Executes specified block with element as parameter</li> <li>Result Handling: Processes return value from child block</li> <li>Progress Tracking: Moves to next element</li> <li>Completion Check: Continues until all elements are processed</li> </ol>"},{"location":"blocks/built-in/foreach/#data-flow","title":"Data Flow","text":"<ul> <li>Element Data: Current array element passed to child block</li> <li>Element Index: Available as iteration counter</li> <li>Input Parameters: Original input data preserved</li> <li>Accumulated Results: Can be collected across iterations</li> </ul>"},{"location":"blocks/built-in/foreach/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/foreach/#user-data-processing","title":"User Data Processing","text":"<pre><code>{\n  \"values\": \"js:context.vars.userList\",\n  \"block\": \"update-user-profile\"\n}\n</code></pre> <p>Process each user in a stored user list.</p>"},{"location":"blocks/built-in/foreach/#file-processing","title":"File Processing","text":"<pre><code>{\n  \"values\": [\"file1.txt\", \"file2.txt\", \"file3.txt\"],\n  \"block\": \"process-file\"\n}\n</code></pre> <p>Process multiple files in sequence.</p>"},{"location":"blocks/built-in/foreach/#api-response-validation","title":"API Response Validation","text":"<pre><code>{\n  \"useParam\": true,\n  \"block\": \"validate-api-response\"\n}\n</code></pre> <p>Validate each item in an API response array.</p>"},{"location":"blocks/built-in/foreach/#email-notifications","title":"Email Notifications","text":"<pre><code>{\n  \"values\": \"js:context.vars.subscribers\",\n  \"block\": \"send-email\"\n}\n</code></pre> <p>Send emails to each subscriber in a list.</p>"},{"location":"blocks/built-in/foreach/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/foreach/#array-validation","title":"Array Validation","text":"<ul> <li>Ensure arrays are not empty before processing</li> <li>Validate array element types when necessary</li> <li>Handle null/undefined values appropriately</li> </ul>"},{"location":"blocks/built-in/foreach/#error-handling","title":"Error Handling","text":"<ul> <li>Implement error handling in the iterated block</li> <li>Use context variables to track processing status</li> <li>Consider partial failure scenarios</li> </ul>"},{"location":"blocks/built-in/foreach/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Be mindful of array size and processing complexity</li> <li>Use efficient algorithms in child blocks</li> <li>Consider memory usage for large arrays</li> </ul>"},{"location":"blocks/built-in/foreach/#data-management","title":"Data Management","text":"<ul> <li>Use context variables to accumulate results</li> <li>Track processing progress and statistics</li> <li>Clean up temporary data after completion</li> </ul>"},{"location":"blocks/built-in/foreach/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>For Loop: Index-based iteration</li> <li>Set Variable: Store iteration results</li> <li>Get Variable: Access stored arrays</li> <li>Array Operations: Manipulate arrays</li> <li>JavaScript Runner: Complex iteration logic</li> </ul>"},{"location":"blocks/built-in/foreach/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/foreach/#input-schema","title":"Input Schema","text":"<pre><code>{\n  values: any[],\n  useParam?: boolean,\n  block?: string\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,\n  output: any,\n  next?: string,\n  error?: string,\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#context-integration","title":"Context Integration","text":"<p>The ForEach block integrates with the execution engine to:</p> <ul> <li>Execute Child Blocks: Run specified blocks for each array element</li> <li>Pass Element Data: Send current element to child block</li> <li>Handle Errors: Propagate errors from child block executions</li> <li>Maintain State: Preserve context across iterations</li> </ul>"},{"location":"blocks/built-in/foreach/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/foreach/#nested-data-processing","title":"Nested Data Processing","text":"<pre><code>// Process nested arrays\n{\n  \"values\": \"js:context.vars.categories.map(cat =&gt; cat.items).flat()\",\n  \"block\": \"process-nested-item\"\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#conditional-processing","title":"Conditional Processing","text":"<pre><code>// Only process active items\n{\n  \"values\": \"js:context.vars.items.filter(item =&gt; item.active)\",\n  \"block\": \"process-active-item\"\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#result-aggregation","title":"Result Aggregation","text":"<pre><code>// Initialize results\n{\n  \"key\": \"processingResults\",\n  \"value\": \"js:[]\"\n}\n\n// Process items\n{\n  \"values\": \"js:context.vars.items\",\n  \"block\": \"accumulate-result\"\n}\n\n// In accumulate-result block:\n{\n  \"key\": \"processingResults\",\n  \"value\": \"js:[...context.vars.processingResults, result]\"\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#parallel-processing-simulation","title":"Parallel Processing Simulation","text":"<pre><code>// Process in batches\n{\n  \"values\": \"js:context.vars.items.slice(0, 10)\",\n  \"block\": \"process-batch-item\"\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#error-handling_1","title":"\u26a0\ufe0f Error Handling","text":""},{"location":"blocks/built-in/foreach/#common-issues","title":"Common Issues","text":"<p>Invalid Array Input <pre><code>// Problematic: non-array input\n{\n  \"useParam\": true,\n  \"block\": \"process-item\"\n}\n// Input: \"not an array\" - will cause error\n</code></pre></p> <p>Empty Arrays <pre><code>// Handle empty arrays gracefully\n{\n  \"values\": \"js:context.vars.items || []\",\n  \"block\": \"safe-process\"\n}\n</code></pre></p> <p>Element Processing Errors <pre><code>// Implement error boundaries in child blocks\n{\n  \"values\": \"js:context.vars.unreliableData\",\n  \"block\": \"robust-processor\"\n}\n</code></pre></p>"},{"location":"blocks/built-in/foreach/#error-recovery-patterns","title":"Error Recovery Patterns","text":"<pre><code>// Skip failed items\n{\n  \"values\": \"js:context.vars.items\",\n  \"block\": \"skip-on-error\"\n}\n\n// Continue processing despite errors\n{\n  \"values\": \"js:context.vars.items\",\n  \"block\": \"continue-on-error\"\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#available-variables","title":"\ud83d\udd0d Available Variables","text":""},{"location":"blocks/built-in/foreach/#in-child-blocks","title":"In Child Blocks","text":"<ul> <li><code>params</code>: Current array element being processed</li> <li><code>i</code>: Current iteration index (0-based)</li> <li>Context Variables: All existing context variables</li> <li>Original Input: Input data passed to ForEach block</li> </ul>"},{"location":"blocks/built-in/foreach/#example-child-block-usage","title":"Example Child Block Usage","text":"<pre><code>// Access current element\nconst currentItem = params;\nconst itemIndex = i;\n\n// Process the item\nconst processedItem = processItem(currentItem);\n\n// Store result\ncontext.vars.results = context.vars.results || [];\ncontext.vars.results.push({\n  index: itemIndex,\n  original: currentItem,\n  processed: processedItem\n});\n</code></pre>"},{"location":"blocks/built-in/foreach/#performance-characteristics","title":"\ud83d\udcca Performance Characteristics","text":""},{"location":"blocks/built-in/foreach/#time-complexity","title":"Time Complexity","text":"<ul> <li>O(n): Linear time based on array length</li> <li>O(n \u00d7 m): Where m is child block complexity</li> </ul>"},{"location":"blocks/built-in/foreach/#memory-usage","title":"Memory Usage","text":"<ul> <li>Minimal: Only current element stored in memory</li> <li>Configurable: Results can be streamed or batched</li> </ul>"},{"location":"blocks/built-in/foreach/#optimization-tips","title":"Optimization Tips","text":"<ul> <li>Process large arrays in chunks</li> <li>Use efficient algorithms in child blocks</li> <li>Consider async processing for I/O operations</li> <li>Monitor memory usage for large datasets</li> </ul>"},{"location":"blocks/built-in/foreach/#integration-patterns","title":"\ud83d\udd04 Integration Patterns","text":""},{"location":"blocks/built-in/foreach/#with-array-operations","title":"With Array Operations","text":"<pre><code>// Prepare data\n{\n  \"operation\": \"filter\",\n  \"datasource\": \"rawData\",\n  \"value\": \"js:item =&gt; item.active\"\n}\n\n// Process filtered data\n{\n  \"values\": \"js:context.vars.rawData\",\n  \"block\": \"process-filtered-item\"\n}\n</code></pre>"},{"location":"blocks/built-in/foreach/#with-conditional-logic","title":"With Conditional Logic","text":"<pre><code>// Check processing conditions\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.shouldProcess\",\n      \"rhs\": true,\n      \"operator\": \"equals\"\n    }\n  ]\n}\n\n// Conditional processing\n{\n  \"values\": \"js:context.vars.shouldProcess ? context.vars.items : []\",\n  \"block\": \"conditional-process\"\n}\n</code></pre> <p>The ForEach Loop block provides flexible array iteration capabilities, making it easy to process collections of data with consistent logic applied to each element.</p>"},{"location":"blocks/built-in/getvar/","title":"Get Variable Block","text":"<p>The Get Variable block retrieves data stored in the request context variables. It allows you to access data that has been previously stored using the Set Variable block or other blocks that modify the context.</p>"},{"location":"blocks/built-in/getvar/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is essential for retrieving data that has been stored in the request context throughout the API workflow. It enables data persistence and sharing between different blocks in your workflow.</p>"},{"location":"blocks/built-in/getvar/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/getvar/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>key</code> <code>string</code> \u2705 The name of the variable to retrieve"},{"location":"blocks/built-in/getvar/#input-schema","title":"Input Schema","text":"<pre><code>{\n  key: string\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Key Validation: Validates that the key parameter is provided</li> <li>Variable Lookup: Searches for the variable in the request context</li> <li>Value Retrieval: Returns the stored value or null if not found</li> <li>Output Generation: Sends the retrieved value to the next block</li> </ol>"},{"location":"blocks/built-in/getvar/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/getvar/#basic-variable-retrieval","title":"Basic Variable Retrieval","text":"<pre><code>{\n  \"key\": \"userId\"\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#retrieving-complex-data","title":"Retrieving Complex Data","text":"<pre><code>{\n  \"key\": \"userProfile\"\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/getvar/#input","title":"Input","text":"<ul> <li>Target: Receives input data (not used for variable retrieval)</li> </ul>"},{"location":"blocks/built-in/getvar/#output","title":"Output","text":"<ul> <li>Source: Sends the retrieved variable value to the next block</li> <li>Success: Executes when variable is found and retrieved</li> <li>Error: Executes when variable is not found or key is invalid</li> </ul>"},{"location":"blocks/built-in/getvar/#error-handling","title":"\u26a0\ufe0f Error Handling","text":"<p>The block handles several scenarios:</p> <ul> <li>Missing Key: When no key parameter is provided</li> <li>Variable Not Found: When the specified variable doesn't exist in context</li> <li>Invalid Key: When key is not a valid string</li> </ul>"},{"location":"blocks/built-in/getvar/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"successful\": false,\n  \"error\": \"Variable not found or invalid key\",\n  \"continueIfFail\": true,\n  \"output\": null\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/getvar/#user-authentication","title":"User Authentication","text":"<pre><code>// Retrieve authenticated user ID\n{\n  \"key\": \"authenticatedUserId\"\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#session-management","title":"Session Management","text":"<pre><code>// Get session data\n{\n  \"key\": \"sessionData\"\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#data-processing","title":"Data Processing","text":"<pre><code>// Retrieve processed data from previous steps\n{\n  \"key\": \"processedData\"\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#configuration-values","title":"Configuration Values","text":"<pre><code>// Get configuration settings\n{\n  \"key\": \"apiConfig\"\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/getvar/#variable-naming","title":"Variable Naming","text":"<ul> <li>Use descriptive, consistent variable names</li> <li>Follow naming conventions (camelCase, snake_case, etc.)</li> <li>Avoid reserved keywords</li> </ul>"},{"location":"blocks/built-in/getvar/#error-handling_1","title":"Error Handling","text":"<ul> <li>Always check if variable exists before using</li> <li>Implement proper error paths for missing variables</li> <li>Provide default values when appropriate</li> </ul>"},{"location":"blocks/built-in/getvar/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Minimize variable lookups in performance-critical paths</li> <li>Cache frequently accessed variables when possible</li> <li>Consider variable scope and lifetime</li> </ul>"},{"location":"blocks/built-in/getvar/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>Set Variable: Store data in context variables</li> <li>JavaScript Runner: Access and manipulate context variables</li> <li>If: Make decisions based on variable values</li> <li>Transformer: Transform variable data</li> </ul>"},{"location":"blocks/built-in/getvar/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/getvar/#input-schema_1","title":"Input Schema","text":"<pre><code>{\n  key: string\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,\n  output: any,\n  next?: string,\n  error?: string,\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#context-variables","title":"Context Variables","text":"<p>Variables are stored in the request context and can be accessed by any block in the workflow:</p> <pre><code>// Access context variables\nthis.context.vars['variableName']\n\n// Available context methods\nthis.context.vars.getQueryParam(key: string): string\nthis.context.vars.getRouteParam(key: string): string\nthis.context.vars.getHeader(key: string): string\nthis.context.vars.setHeader(key: string, value: string): void\nthis.context.vars.getCookie(key: string): string\nthis.context.vars.setCookie(name: string, value: any): void\n</code></pre>"},{"location":"blocks/built-in/getvar/#variable-scope","title":"\ud83d\udd0d Variable Scope","text":"<p>Variables have request-level scope and are available throughout the entire API workflow:</p> <ul> <li>Created: When first set using Set Variable block</li> <li>Accessed: By any block in the same request</li> <li>Modified: Can be updated by subsequent blocks</li> <li>Destroyed: When the request completes</li> </ul>"},{"location":"blocks/built-in/getvar/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/getvar/#chaining-variables","title":"Chaining Variables","text":"<pre><code>// Set multiple related variables\n{\n  \"key\": \"userPreferences\"\n}\n\n// Retrieve and process\n{\n  \"key\": \"userPreferences\"\n}\n</code></pre>"},{"location":"blocks/built-in/getvar/#dynamic-variable-names","title":"Dynamic Variable Names","text":"<p>While direct dynamic variable names aren't supported, you can use JavaScript Runner for complex variable operations:</p> <pre><code>// In JavaScript Runner block\nconst dynamicKey = `user_${userId}`;\nconst value = context.vars[dynamicKey];\n</code></pre>"},{"location":"blocks/built-in/getvar/#variable-validation","title":"Variable Validation","text":"<p>```json // Check if variable exists before processing {   \"key\": \"requiredData\" } // Handle in next blocks based on success/error paths</p>"},{"location":"blocks/built-in/if/","title":"If Condition Block","text":"<p>The If Condition block provides conditional branching logic, allowing you to execute different paths based on specified conditions. It supports complex logical expressions with AND/OR operations and JavaScript evaluation.</p>"},{"location":"blocks/built-in/if/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block enables decision-making in your API workflows, allowing you to:</p> <ul> <li>Route requests based on conditions</li> <li>Validate input data before processing</li> <li>Implement business logic rules</li> <li>Handle different scenarios dynamically</li> </ul>"},{"location":"blocks/built-in/if/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/if/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>conditions</code> <code>array</code> \u2705 Array of condition objects to evaluate"},{"location":"blocks/built-in/if/#condition-object-structure","title":"Condition Object Structure","text":"Property Type Required Description <code>lhs</code> <code>string \\| number \\| boolean</code> \u2705 Left-hand side value <code>rhs</code> <code>string \\| number \\| boolean</code> \u2705 Right-hand side value <code>operator</code> <code>string</code> \u2705 Comparison operator <code>js</code> <code>string</code> \u274c JavaScript expression for complex conditions <code>chain</code> <code>enum</code> \u274c Logical operator for chaining (<code>and</code>, <code>or</code>)"},{"location":"blocks/built-in/if/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Condition Evaluation: Evaluates each condition in sequence</li> <li>Logical Operations: Applies AND/OR logic between conditions</li> <li>Result Determination: Determines if overall condition is true or false</li> <li>Path Selection: Routes to success or error path based on result</li> </ol>"},{"location":"blocks/built-in/if/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/if/#simple-equality-check","title":"Simple Equality Check","text":"<pre><code>{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.userRole\",\n      \"rhs\": \"admin\",\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#multiple-conditions-with-and","title":"Multiple Conditions with AND","text":"<pre><code>{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.userAge\",\n      \"rhs\": 18,\n      \"operator\": \"greaterThan\"\n    },\n    {\n      \"lhs\": \"js:context.vars.userStatus\",\n      \"rhs\": \"active\",\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#complex-or-logic","title":"Complex OR Logic","text":"<pre><code>{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.userType\",\n      \"rhs\": \"premium\",\n      \"operator\": \"equals\"\n    },\n    {\n      \"lhs\": \"js:context.vars.purchaseAmount\",\n      \"rhs\": 100,\n      \"operator\": \"greaterThan\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#javascript-expressions","title":"JavaScript Expressions","text":"<pre><code>{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:new Date(context.vars.userCreatedAt).getTime()\",\n      \"rhs\": \"js:Date.now() - (30 * 24 * 60 * 60 * 1000)\",\n      \"operator\": \"greaterThan\",\n      \"js\": \"lhs &gt; rhs\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/if/#input","title":"Input","text":"<ul> <li>Target: Receives input data for condition evaluation</li> </ul>"},{"location":"blocks/built-in/if/#output","title":"Output","text":"<ul> <li>Success: Executes when all conditions evaluate to true</li> <li>Error: Executes when conditions evaluate to false</li> <li>Next: Default path (can be configured)</li> </ul>"},{"location":"blocks/built-in/if/#condition-evaluation","title":"\ud83d\udd00 Condition Evaluation","text":""},{"location":"blocks/built-in/if/#supported-operators","title":"Supported Operators","text":"Operator Description Example <code>equals</code> Exact equality <code>userRole == \"admin\"</code> <code>notEquals</code> Inequality <code>status != \"inactive\"</code> <code>greaterThan</code> Greater than <code>age &gt; 18</code> <code>lessThan</code> Less than <code>score &lt; 100</code> <code>greaterThanOrEqual</code> Greater than or equal <code>level &gt;= 5</code> <code>lessThanOrEqual</code> Less than or equal <code>count &lt;= 10</code> <code>contains</code> String contains <code>email.includes(\"@\")</code> <code>startsWith</code> String starts with <code>name.startsWith(\"Mr\")</code> <code>endsWith</code> String ends with <code>file.endsWith(\".pdf\")</code>"},{"location":"blocks/built-in/if/#logical-operations","title":"Logical Operations","text":"<ul> <li>AND: All conditions must be true (default)</li> <li>OR: At least one condition must be true</li> </ul>"},{"location":"blocks/built-in/if/#javascript-evaluation","title":"JavaScript Evaluation","text":"<p>Conditions can include JavaScript expressions for complex logic:</p> <pre><code>// Complex date comparison\n{\n  \"lhs\": \"js:new Date(context.vars.expiryDate)\",\n  \"rhs\": \"js:new Date()\",\n  \"operator\": \"greaterThan\",\n  \"js\": \"lhs.getTime() &gt; rhs.getTime()\"\n}\n\n// Array membership\n{\n  \"lhs\": \"js:context.vars.userPermissions\",\n  \"rhs\": \"write\",\n  \"operator\": \"contains\",\n  \"js\": \"Array.isArray(lhs) &amp;&amp; lhs.includes(rhs)\"\n}\n</code></pre>"},{"location":"blocks/built-in/if/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/if/#user-authorization","title":"User Authorization","text":"<pre><code>{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.userRole\",\n      \"rhs\": \"admin\",\n      \"operator\": \"equals\"\n    },\n    {\n      \"lhs\": \"js:context.vars.isAuthenticated\",\n      \"rhs\": true,\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#data-validation","title":"Data Validation","text":"<pre><code>{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.email\",\n      \"rhs\": \"@\",\n      \"operator\": \"contains\"\n    },\n    {\n      \"lhs\": \"js:context.vars.age\",\n      \"rhs\": 0,\n      \"operator\": \"greaterThan\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#business-rules","title":"Business Rules","text":"<pre><code>{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.orderTotal\",\n      \"rhs\": 500,\n      \"operator\": \"greaterThan\"\n    },\n    {\n      \"lhs\": \"js:context.vars.customerTier\",\n      \"rhs\": \"gold\",\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/if/#condition-design","title":"Condition Design","text":"<ul> <li>Keep conditions simple and readable</li> <li>Use descriptive variable names</li> <li>Group related conditions logically</li> </ul>"},{"location":"blocks/built-in/if/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Avoid complex JavaScript expressions when possible</li> <li>Cache frequently used computed values</li> <li>Consider condition evaluation order</li> </ul>"},{"location":"blocks/built-in/if/#error-handling","title":"Error Handling","text":"<ul> <li>Always provide fallback paths</li> <li>Log condition evaluation results for debugging</li> <li>Handle edge cases and invalid data</li> </ul>"},{"location":"blocks/built-in/if/#testing","title":"Testing","text":"<ul> <li>Test all possible condition combinations</li> <li>Verify edge cases and boundary conditions</li> <li>Document expected behavior for each path</li> </ul>"},{"location":"blocks/built-in/if/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>JavaScript Runner: Complex conditional logic</li> <li>Set Variable: Store condition results</li> <li>Get Variable: Access stored values for conditions</li> <li>For Loop: Conditional loop execution</li> <li>Response: Different responses based on conditions</li> </ul>"},{"location":"blocks/built-in/if/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/if/#input-schema","title":"Input Schema","text":"<pre><code>{\n  conditions: Array&lt;{\n    lhs: string | number | boolean,\n    rhs: string | number | boolean,\n    operator: string,\n    js?: string,\n    chain?: \"and\" | \"or\"\n  }&gt;\n}\n</code></pre>"},{"location":"blocks/built-in/if/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,\n  output: boolean,\n  next?: string,\n  error?: string,\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/if/#context-integration","title":"Context Integration","text":"<p>The If block integrates with the request context to:</p> <ul> <li>Access Variables: Read context variables for condition evaluation</li> <li>JavaScript Execution: Run JavaScript expressions in isolated VM</li> <li>Path Selection: Route execution based on evaluation results</li> <li>Error Propagation: Handle and propagate evaluation errors</li> </ul>"},{"location":"blocks/built-in/if/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/if/#nested-conditions","title":"Nested Conditions","text":"<pre><code>// Complex business logic\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.userType\",\n      \"rhs\": \"premium\",\n      \"operator\": \"equals\"\n    },\n    {\n      \"lhs\": \"js:context.vars.accountBalance\",\n      \"rhs\": 1000,\n      \"operator\": \"greaterThan\"\n    },\n    {\n      \"lhs\": \"js:context.vars.subscriptionStatus\",\n      \"rhs\": \"active\",\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#dynamic-condition-building","title":"Dynamic Condition Building","text":"<pre><code>// Build conditions from configuration\n{\n  \"conditions\": \"js:context.vars.dynamicConditions.map(cond =&gt; ({\n    lhs: cond.field,\n    rhs: cond.value,\n    operator: cond.operator\n  }))\"\n}\n</code></pre>"},{"location":"blocks/built-in/if/#time-based-conditions","title":"Time-Based Conditions","text":"<pre><code>// Time-sensitive logic\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:new Date().getHours()\",\n      \"rhs\": 9,\n      \"operator\": \"greaterThanOrEqual\"\n    },\n    {\n      \"lhs\": \"js:new Date().getHours()\",\n      \"rhs\": 17,\n      \"operator\": \"lessThan\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#error-handling_1","title":"\u26a0\ufe0f Error Handling","text":""},{"location":"blocks/built-in/if/#common-issues","title":"Common Issues","text":"<p>Invalid Operators <pre><code>// Problematic: unsupported operator\n{\n  \"lhs\": \"value\",\n  \"rhs\": \"test\",\n  \"operator\": \"invalidOperator\"\n}\n</code></pre></p> <p>Type Mismatches <pre><code>// Problematic: comparing incompatible types\n{\n  \"lhs\": \"js:context.vars.numberValue\",\n  \"rhs\": \"string\",\n  \"operator\": \"equals\"\n}\n</code></pre></p> <p>JavaScript Errors <pre><code>// Problematic: syntax error in JS expression\n{\n  \"lhs\": \"js:invalid.syntax.here\",\n  \"rhs\": \"value\",\n  \"operator\": \"equals\"\n}\n</code></pre></p>"},{"location":"blocks/built-in/if/#error-recovery","title":"Error Recovery","text":"<pre><code>// Implement error boundaries\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.safeValue || 'default'\",\n      \"rhs\": \"expected\",\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/if/#condition-debugging","title":"\ud83d\udd0d Condition Debugging","text":""},{"location":"blocks/built-in/if/#logging-condition-results","title":"Logging Condition Results","text":"<pre><code>// Log condition evaluation\nconsole.log('User role:', context.vars.userRole);\nconsole.log('Is admin:', context.vars.userRole === 'admin');\n</code></pre>"},{"location":"blocks/built-in/if/#step-by-step-evaluation","title":"Step-by-Step Evaluation","text":"<pre><code>// Break complex conditions into steps\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.step1Result\",\n      \"rhs\": true,\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre> <p>The If Condition block provides powerful decision-making capabilities, enabling complex business logic and conditional routing in your API workflows.</p>"},{"location":"blocks/built-in/interceptor/","title":"Interceptor Block (Internal Use Only)","text":"<p>:::warning \u26a0\ufe0f Internal Use Only</p> <p>This block is intended for internal framework use and advanced customization. It should not be used in regular API workflows unless you have specific framework-level requirements.</p> <p>Not recommended for standard API development. :::</p>"},{"location":"blocks/built-in/interceptor/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The Interceptor block provides a low-level hook for intercepting and modifying request execution flow. It allows custom functions to be injected into the execution pipeline for specialized processing, debugging, or framework-level modifications.</p>"},{"location":"blocks/built-in/interceptor/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/interceptor/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description (none) - - No standard configuration parameters"},{"location":"blocks/built-in/interceptor/#constructor-parameters","title":"Constructor Parameters","text":"Parameter Type Required Description <code>context</code> <code>Context</code> \u2705 Request context <code>next</code> <code>string</code> \u274c Next block ID <code>fn</code> <code>InterceptorFunction</code> \u274c Custom interceptor function"},{"location":"blocks/built-in/interceptor/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Function Execution: Executes the provided interceptor function</li> <li>Context Modification: Allows modification of request context</li> <li>Flow Interception: Can alter execution flow or data</li> <li>Result Propagation: Passes modified data to next block</li> </ol>"},{"location":"blocks/built-in/interceptor/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/interceptor/#basic-interceptor","title":"Basic Interceptor","text":"<pre><code>import { InterceptorBlock } from \"../interceptor\";\n\nconst interceptor = new InterceptorBlock(\n  context,\n  \"next-block\",\n  (ctx, params) =&gt; {\n    // Custom interception logic\n    console.log(\"Intercepting request:\", ctx.route);\n    // Modify context or parameters\n    ctx.vars.intercepted = true;\n  }\n);\n</code></pre>"},{"location":"blocks/built-in/interceptor/#logging-interceptor","title":"Logging Interceptor","text":"<pre><code>const loggingInterceptor = (context, params) =&gt; {\n  const timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] ${context.route}:`, params);\n};\n</code></pre>"},{"location":"blocks/built-in/interceptor/#authentication-interceptor","title":"Authentication Interceptor","text":"<pre><code>const authInterceptor = (context, params) =&gt; {\n  const token = context.vars.getHeader('Authorization');\n  if (!token || !token.startsWith('Bearer ')) {\n    throw new Error('Unauthorized');\n  }\n  context.vars.authenticated = true;\n};\n</code></pre>"},{"location":"blocks/built-in/interceptor/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/interceptor/#input","title":"Input","text":"<ul> <li>Target: Receives input data for interception</li> </ul>"},{"location":"blocks/built-in/interceptor/#output","title":"Output","text":"<ul> <li>Source: Sends potentially modified data to next block</li> <li>Success: Always executes (interception doesn't fail)</li> <li>Error: Never executes (block always succeeds)</li> </ul>"},{"location":"blocks/built-in/interceptor/#interceptor-function","title":"\ud83d\udd27 Interceptor Function","text":""},{"location":"blocks/built-in/interceptor/#function-signature","title":"Function Signature","text":"<pre><code>type InterceptorFunction = (context: Context, params?: any) =&gt; void;\n</code></pre>"},{"location":"blocks/built-in/interceptor/#parameters","title":"Parameters","text":"<ul> <li><code>context</code>: Full request context with access to:</li> <li>HTTP request data (headers, params, body)</li> <li>Context variables</li> <li>JavaScript VM</li> <li> <p>Route information</p> </li> <li> <p><code>params</code>: Input data passed from previous block</p> </li> </ul>"},{"location":"blocks/built-in/interceptor/#capabilities","title":"Capabilities","text":"<ul> <li>Read/Write Context: Full access to context variables and HTTP data</li> <li>Modify Data: Alter input parameters or context state</li> <li>Throw Errors: Interrupt execution with custom errors</li> <li>Logging: Access to console and custom logging</li> <li>External Calls: Make HTTP requests or database calls</li> </ul>"},{"location":"blocks/built-in/interceptor/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/interceptor/#framework-level-features","title":"Framework-Level Features","text":"<pre><code>// Request timing\nconst timingInterceptor = (context) =&gt; {\n  context.vars.requestStart = Date.now();\n};\n\n// Response timing\nconst responseTimingInterceptor = (context) =&gt; {\n  const duration = Date.now() - context.vars.requestStart;\n  console.log(`Request duration: ${duration}ms`);\n};\n</code></pre>"},{"location":"blocks/built-in/interceptor/#custom-middleware","title":"Custom Middleware","text":"<pre><code>// CORS handling\nconst corsInterceptor = (context) =&gt; {\n  context.vars.setHeader('Access-Control-Allow-Origin', '*');\n  context.vars.setHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE');\n};\n</code></pre>"},{"location":"blocks/built-in/interceptor/#advanced-logging","title":"Advanced Logging","text":"<pre><code>// Structured logging\nconst structuredLogger = (context, params) =&gt; {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    route: context.route,\n    method: context.httpRequestMethod,\n    params: params,\n    userAgent: context.vars.getHeader('User-Agent'),\n    ip: context.vars.getHeader('X-Forwarded-For')\n  };\n  // Send to logging service\n  sendToLoggingService(logEntry);\n};\n</code></pre>"},{"location":"blocks/built-in/interceptor/#important-considerations","title":"\u26a0\ufe0f Important Considerations","text":""},{"location":"blocks/built-in/interceptor/#security-risks","title":"Security Risks","text":"<ul> <li>Full Context Access: Can read/write all request data</li> <li>Code Injection: Custom functions can execute arbitrary code</li> <li>Data Exposure: Sensitive data might be logged or modified</li> </ul>"},{"location":"blocks/built-in/interceptor/#performance-impact","title":"Performance Impact","text":"<ul> <li>Execution Overhead: Each interceptor adds processing time</li> <li>Blocking Operations: Synchronous interceptors can slow requests</li> <li>Memory Usage: Interceptors retain references to context</li> </ul>"},{"location":"blocks/built-in/interceptor/#debugging-challenges","title":"Debugging Challenges","text":"<ul> <li>Invisible Logic: Interceptors don't appear in visual workflow</li> <li>Side Effects: Can modify data unexpectedly</li> <li>Error Tracing: Difficult to trace issues in interceptor code</li> </ul>"},{"location":"blocks/built-in/interceptor/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/interceptor/#development-guidelines","title":"Development Guidelines","text":"<ul> <li>Clear Purpose: Each interceptor should have a single, clear responsibility</li> <li>Documentation: Thoroughly document interceptor behavior and side effects</li> <li>Error Handling: Implement proper error handling and recovery</li> <li>Testing: Comprehensive testing of interceptor logic</li> </ul>"},{"location":"blocks/built-in/interceptor/#security-measures","title":"Security Measures","text":"<ul> <li>Input Validation: Validate all inputs and context data</li> <li>Access Control: Limit sensitive data access</li> <li>Audit Logging: Log interceptor execution for security monitoring</li> </ul>"},{"location":"blocks/built-in/interceptor/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Async Operations: Use async interceptors for I/O operations</li> <li>Caching: Cache expensive operations when possible</li> <li>Conditional Execution: Only execute when necessary</li> </ul>"},{"location":"blocks/built-in/interceptor/#related-concepts","title":"\ud83d\udd17 Related Concepts","text":"<ul> <li>JavaScript Runner: Safer alternative for custom logic</li> <li>Set Variable: Standard way to modify context</li> <li>Console Log: Standard logging approach</li> </ul>"},{"location":"blocks/built-in/interceptor/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/interceptor/#constructor","title":"Constructor","text":"<pre><code>constructor(\n  context: Context,\n  next?: string,\n  fn?: InterceptorFunction\n)\n</code></pre>"},{"location":"blocks/built-in/interceptor/#execute-method","title":"Execute Method","text":"<pre><code>executeAsync(params?: any): Promise&lt;BlockOutput&gt;\n</code></pre>"},{"location":"blocks/built-in/interceptor/#interceptor-function-type","title":"Interceptor Function Type","text":"<pre><code>type InterceptorFunction = (context: Context, params?: any) =&gt; void;\n</code></pre>"},{"location":"blocks/built-in/interceptor/#context-access","title":"Context Access","text":"<pre><code>interface Context {\n  vm: JsVM;\n  route: string;\n  apiId: string;\n  vars: ContextVarsType &amp; Record&lt;string, any&gt;;\n  requestBody?: any;\n}\n</code></pre>"},{"location":"blocks/built-in/interceptor/#when-not-to-use","title":"\ud83d\udeab When Not to Use","text":""},{"location":"blocks/built-in/interceptor/#instead-of-standard-blocks","title":"Instead of Standard Blocks","text":"<pre><code>// \u274c Don't use interceptor for simple variable setting\nconst badInterceptor = (context) =&gt; {\n  context.vars.userId = '123';\n};\n\n// \u2705 Use Set Variable block instead\n{\n  \"key\": \"userId\",\n  \"value\": \"123\"\n}\n</code></pre>"},{"location":"blocks/built-in/interceptor/#instead-of-error-handling","title":"Instead of Error Handling","text":"<pre><code>// \u274c Don't use interceptor for error handling\nconst errorInterceptor = (context) =&gt; {\n  if (!context.vars.userId) {\n    throw new Error('User not found');\n  }\n};\n\n// \u2705 Use If block with proper error paths\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.userId\",\n      \"rhs\": null,\n      \"operator\": \"equals\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blocks/built-in/interceptor/#framework-integration","title":"\ud83d\udd27 Framework Integration","text":""},{"location":"blocks/built-in/interceptor/#custom-block-development","title":"Custom Block Development","text":"<pre><code>// Framework-level interceptor for custom blocks\nclass CustomFrameworkBlock extends BaseBlock {\n  constructor(context, config, interceptor) {\n    super(context, config.next);\n    this.interceptor = interceptor;\n  }\n\n  async executeAsync(params) {\n    // Pre-processing\n    await this.interceptor(this.context, params);\n\n    // Main logic\n    const result = await this.process(params);\n\n    // Post-processing\n    await this.interceptor(this.context, result);\n\n    return result;\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/interceptor/#plugin-system","title":"Plugin System","text":"<pre><code>// Plugin architecture using interceptors\nconst pluginSystem = {\n  interceptors: [],\n\n  register(interceptor) {\n    this.interceptors.push(interceptor);\n  },\n\n  async execute(context, params) {\n    for (const interceptor of this.interceptors) {\n      await interceptor(context, params);\n    }\n  }\n};\n</code></pre>"},{"location":"blocks/built-in/interceptor/#migration-guide","title":"\ud83d\udccb Migration Guide","text":""},{"location":"blocks/built-in/interceptor/#from-interceptors-to-standard-blocks","title":"From Interceptors to Standard Blocks","text":"<pre><code>// Old interceptor approach\nconst oldInterceptor = (context) =&gt; {\n  const user = context.vars.user;\n  if (user.role === 'admin') {\n    context.vars.isAdmin = true;\n  }\n};\n\n// New standard block approach\n// 1. Use Get Variable to access user\n{\n  \"key\": \"user\"\n}\n// 2. Use If block for condition\n{\n  \"conditions\": [\n    {\n      \"lhs\": \"js:context.vars.user.role\",\n      \"rhs\": \"admin\",\n      \"operator\": \"equals\"\n    }\n  ]\n}\n// 3. Use Set Variable for result\n{\n  \"key\": \"isAdmin\",\n  \"value\": true\n}\n</code></pre>"},{"location":"blocks/built-in/interceptor/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>The Interceptor block is a powerful but dangerous tool that should only be used when absolutely necessary. For most use cases, standard blocks provide safer, more maintainable, and more visible alternatives. When interceptors are required, ensure they are thoroughly tested, documented, and monitored.</p> <p>Recommendation: Avoid using interceptors unless you have specific framework-level requirements that cannot be satisfied with standard blocks.</p>"},{"location":"blocks/built-in/jsrunner/","title":"JavaScript Runner Block","text":"<p>The JavaScript Runner block provides a powerful way to execute custom JavaScript code within your API workflows. It runs code in an isolated sandbox environment with access to the request context, enabling complex logic, data transformations, and integrations.</p>"},{"location":"blocks/built-in/jsrunner/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block allows you to write and execute custom JavaScript code to handle complex processing requirements that cannot be achieved with standard blocks. It's particularly useful for:</p> <ul> <li>Complex data transformations</li> <li>Custom business logic implementation</li> <li>External API integrations</li> <li>Advanced calculations and algorithms</li> <li>Dynamic content generation</li> </ul>"},{"location":"blocks/built-in/jsrunner/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/jsrunner/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description (JavaScript code) <code>string</code> \u2705 JavaScript code to execute"},{"location":"blocks/built-in/jsrunner/#code-input","title":"Code Input","text":"<p>The block accepts any valid JavaScript code as a string. The code has access to:</p> <ul> <li>Context Variables: <code>context.vars</code></li> <li>HTTP Data: Request parameters, headers, body</li> <li>Input Parameters: Data from previous blocks</li> <li>JavaScript APIs: Standard JavaScript functionality</li> </ul>"},{"location":"blocks/built-in/jsrunner/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Code Validation: Basic syntax validation</li> <li>VM Execution: Code runs in isolated JavaScript VM</li> <li>Context Access: Full access to request context</li> <li>Result Processing: Captures return value or last expression</li> <li>Error Handling: Catches and reports execution errors</li> </ol>"},{"location":"blocks/built-in/jsrunner/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/jsrunner/#simple-data-transformation","title":"Simple Data Transformation","text":"<pre><code>// Transform user data\nconst user = context.vars.user;\nreturn {\n  fullName: `${user.firstName} ${user.lastName}`,\n  email: user.email.toLowerCase(),\n  isActive: user.status === 'active'\n};\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#api-integration","title":"API Integration","text":"<pre><code>// Call external API\nconst response = await fetch('https://api.example.com/users', {\n  method: 'GET',\n  headers: {\n    'Authorization': `Bearer ${context.vars.apiKey}`,\n    'Content-Type': 'application/json'\n  }\n});\n\nconst data = await response.json();\nreturn data.users;\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#complex-calculations","title":"Complex Calculations","text":"<pre><code>// Calculate business metrics\nconst orders = context.vars.orders;\nconst totalRevenue = orders.reduce((sum, order) =&gt; sum + order.amount, 0);\nconst averageOrder = totalRevenue / orders.length;\nconst topProducts = orders\n  .flatMap(order =&gt; order.items)\n  .reduce((acc, item) =&gt; {\n    acc[item.productId] = (acc[item.productId] || 0) + item.quantity;\n    return acc;\n  }, {});\n\nreturn {\n  totalRevenue,\n  averageOrder,\n  topProducts\n};\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#dynamic-content-generation","title":"Dynamic Content Generation","text":"<pre><code>// Generate personalized response\nconst user = context.vars.user;\nconst preferences = context.vars.preferences;\n\nconst greeting = preferences.language === 'es'\n  ? `\u00a1Hola ${user.name}!`\n  : `Hello ${user.name}!`;\n\nconst recommendations = context.vars.products\n  .filter(product =&gt; product.category === preferences.favoriteCategory)\n  .slice(0, 5);\n\nreturn {\n  greeting,\n  recommendations,\n  timestamp: new Date().toISOString()\n};\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/jsrunner/#input","title":"Input","text":"<ul> <li>Target: Receives input data as <code>params</code> variable</li> </ul>"},{"location":"blocks/built-in/jsrunner/#output","title":"Output","text":"<ul> <li>Source: Sends execution result to next block</li> <li>Success: Executes when code runs successfully</li> <li>Error: Executes when code throws an error or fails</li> </ul>"},{"location":"blocks/built-in/jsrunner/#javascript-environment","title":"\ud83d\udd27 JavaScript Environment","text":""},{"location":"blocks/built-in/jsrunner/#available-variables","title":"Available Variables","text":"Variable Description Example <code>context</code> Full request context <code>context.vars.user</code> <code>params</code> Input from previous block <code>params.data</code> <code>console</code> Logging functionality <code>console.log('Debug')</code>"},{"location":"blocks/built-in/jsrunner/#context-access","title":"Context Access","text":"<pre><code>// HTTP Data\nconst userId = context.vars.getRouteParam('userId');\nconst authToken = context.vars.getHeader('Authorization');\nconst requestBody = context.vars.getRequestBody();\n\n// Context Variables\nconst user = context.vars.user;\nconst config = context.vars.appConfig;\n\n// Request Info\nconst method = context.httpRequestMethod;\nconst route = context.httpRequestRoute;\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#utility-functions","title":"Utility Functions","text":"<pre><code>// HTTP Operations\ncontext.vars.setHeader('Content-Type', 'application/json');\ncontext.vars.setCookie('session', 'abc123');\n\n// Variable Management\ncontext.vars.userProfile = { name: 'John', role: 'admin' };\ncontext.vars.processedData = transformData(params);\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/jsrunner/#data-validation-and-sanitization","title":"Data Validation and Sanitization","text":"<pre><code>// Validate and sanitize user input\nconst input = params;\n\nif (!input.email || !input.email.includes('@')) {\n  throw new Error('Invalid email address');\n}\n\nreturn {\n  email: input.email.toLowerCase().trim(),\n  name: input.name.trim(),\n  age: parseInt(input.age) || 0,\n  isValid: true\n};\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#database-operations","title":"Database Operations","text":"<pre><code>// Simulate database operations\nconst userId = context.vars.getRouteParam('userId');\nconst userData = params;\n\n// In a real scenario, this would connect to a database\nconst updatedUser = {\n  ...userData,\n  id: userId,\n  updatedAt: new Date().toISOString(),\n  version: (userData.version || 0) + 1\n};\n\n// Store in context for next blocks\ncontext.vars.updatedUser = updatedUser;\n\nreturn updatedUser;\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#external-service-integration","title":"External Service Integration","text":"<pre><code>// Integrate with payment service\nconst paymentData = params;\n\ntry {\n  const paymentResponse = await fetch('https://api.payment.com/charge', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${context.vars.paymentApiKey}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      amount: paymentData.amount,\n      currency: paymentData.currency,\n      source: paymentData.token\n    })\n  });\n\n  const result = await paymentResponse.json();\n\n  if (!paymentResponse.ok) {\n    throw new Error(`Payment failed: ${result.message}`);\n  }\n\n  return {\n    success: true,\n    transactionId: result.id,\n    amount: result.amount,\n    status: result.status\n  };\n\n} catch (error) {\n  return {\n    success: false,\n    error: error.message,\n    timestamp: new Date().toISOString()\n  };\n}\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#complex-business-logic","title":"Complex Business Logic","text":"<pre><code>// Implement business rules\nconst order = params;\nconst user = context.vars.user;\n\nlet discount = 0;\n\n// Apply business rules\nif (user.membership === 'premium') {\n  discount = 0.1; // 10% discount\n} else if (order.total &gt; 100) {\n  discount = 0.05; // 5% discount for large orders\n}\n\nif (user.loyaltyPoints &gt; 1000) {\n  discount += 0.05; // Additional 5% for loyal customers\n}\n\n// Calculate final amount\nconst discountAmount = order.total * discount;\nconst finalAmount = order.total - discountAmount;\n\n// Apply tax\nconst taxRate = context.vars.taxRate || 0.08;\nconst taxAmount = finalAmount * taxRate;\nconst totalWithTax = finalAmount + taxAmount;\n\nreturn {\n  originalAmount: order.total,\n  discountAmount,\n  discountPercentage: discount * 100,\n  amountAfterDiscount: finalAmount,\n  taxAmount,\n  taxRate: taxRate * 100,\n  totalAmount: totalWithTax,\n  appliedRules: {\n    premiumMember: user.membership === 'premium',\n    largeOrder: order.total &gt; 100,\n    loyalCustomer: user.loyaltyPoints &gt; 1000\n  }\n};\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/jsrunner/#code-organization","title":"Code Organization","text":"<ul> <li>Keep functions focused and single-purpose</li> <li>Use meaningful variable names</li> <li>Add comments for complex logic</li> <li>Break large code blocks into smaller functions</li> </ul>"},{"location":"blocks/built-in/jsrunner/#error-handling","title":"Error Handling","text":"<ul> <li>Always wrap external API calls in try-catch</li> <li>Provide meaningful error messages</li> <li>Handle different error scenarios appropriately</li> <li>Use custom error types for better error handling</li> </ul>"},{"location":"blocks/built-in/jsrunner/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Avoid blocking operations in hot paths</li> <li>Cache expensive computations when possible</li> <li>Use efficient algorithms and data structures</li> <li>Minimize external API calls</li> </ul>"},{"location":"blocks/built-in/jsrunner/#security-guidelines","title":"Security Guidelines","text":"<ul> <li>Validate all inputs before processing</li> <li>Sanitize data to prevent injection attacks</li> <li>Use HTTPS for external API calls</li> <li>Don't log sensitive information</li> </ul>"},{"location":"blocks/built-in/jsrunner/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>Set Variable: Store results from JavaScript execution</li> <li>Get Variable: Access stored data in JavaScript</li> <li>If: Make decisions based on JavaScript results</li> <li>Transformer: Alternative for data transformations</li> <li>Console Log: Debug JavaScript execution</li> </ul>"},{"location":"blocks/built-in/jsrunner/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/jsrunner/#input-schema","title":"Input Schema","text":"<pre><code>string // JavaScript code as string\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,\n  output: any,           // Return value of JavaScript code\n  next?: string,\n  error?: string,        // Error message if execution fails\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#context-interface","title":"Context Interface","text":"<pre><code>interface Context {\n  vm: JsVM;                              // JavaScript VM instance\n  route: string;                         // Current route path\n  apiId: string;                         // API identifier\n  vars: ContextVarsType &amp; Record&lt;string, any&gt;; // Context variables\n  requestBody?: any;                     // Parsed request body\n}\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#available-methods","title":"Available Methods","text":"<pre><code>// HTTP Data Access\ncontext.vars.getQueryParam(key: string): string\ncontext.vars.getRouteParam(key: string): string\ncontext.vars.getHeader(key: string): string\ncontext.vars.getCookie(key: string): string\ncontext.vars.getRequestBody(): any\n\n// HTTP Response\ncontext.vars.setHeader(key: string, value: string): void\ncontext.vars.setCookie(name: string, value: any): void\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/jsrunner/#async-operations","title":"Async Operations","text":"<pre><code>// Handle asynchronous operations\nasync function processData(data) {\n  // Simulate async processing\n  await new Promise(resolve =&gt; setTimeout(resolve, 100));\n\n  return data.map(item =&gt; ({\n    ...item,\n    processed: true,\n    timestamp: new Date().toISOString()\n  }));\n}\n\nconst result = await processData(params);\nreturn result;\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#complex-data-structures","title":"Complex Data Structures","text":"<pre><code>// Work with complex nested data\nfunction flattenUserData(user) {\n  return {\n    id: user.id,\n    name: user.profile.name,\n    email: user.contact.email,\n    address: {\n      street: user.profile.address.street,\n      city: user.profile.address.city,\n      country: user.profile.address.country\n    },\n    preferences: user.settings.preferences,\n    lastLogin: user.activity.lastLogin,\n    isActive: user.status === 'active'\n  };\n}\n\nconst flattenedUsers = params.users.map(flattenUserData);\nreturn flattenedUsers;\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#state-management","title":"State Management","text":"<pre><code>// Manage complex state across executions\nif (!context.vars.sessionData) {\n  context.vars.sessionData = {\n    startTime: new Date(),\n    operations: [],\n    counters: {}\n  };\n}\n\ncontext.vars.sessionData.operations.push({\n  type: 'javascript_execution',\n  timestamp: new Date(),\n  input: params\n});\n\ncontext.vars.sessionData.counters.javascriptRuns =\n  (context.vars.sessionData.counters.javascriptRuns || 0) + 1;\n\nreturn {\n  sessionDuration: Date.now() - context.vars.sessionData.startTime,\n  totalOperations: context.vars.sessionData.operations.length,\n  javascriptRuns: context.vars.sessionData.counters.javascriptRuns\n};\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#error-handling_1","title":"\u26a0\ufe0f Error Handling","text":""},{"location":"blocks/built-in/jsrunner/#common-issues","title":"Common Issues","text":"<p>Syntax Errors <pre><code>// Problematic: syntax error\nconst result = params.data.map(item =&gt; {\n  return item.value * 2; // Missing closing brace\n});\n\n// Fixed\nconst result = params.data.map(item =&gt; {\n  return item.value * 2;\n});\n</code></pre></p> <p>Undefined Variables <pre><code>// Problematic: undefined context variable\nconst user = context.vars.nonExistentUser; // Will be undefined\nreturn user.name; // Error: Cannot read property 'name'\n\n// Fixed\nconst user = context.vars.user || { name: 'Unknown' };\nreturn user.name;\n</code></pre></p> <p>Async/Await Issues <pre><code>// Problematic: missing await\nconst result = fetch('https://api.example.com/data');\nreturn result; // Returns Promise, not data\n\n// Fixed\nconst response = await fetch('https://api.example.com/data');\nconst result = await response.json();\nreturn result;\n</code></pre></p>"},{"location":"blocks/built-in/jsrunner/#error-recovery","title":"Error Recovery","text":"<pre><code>// Implement error boundaries\ntry {\n  const data = params.requiredData;\n  if (!data) {\n    throw new Error('Required data is missing');\n  }\n\n  const result = processData(data);\n  return result;\n\n} catch (error) {\n  // Log error for debugging\n  console.error('JavaScript execution error:', error);\n\n  // Return safe fallback\n  return {\n    success: false,\n    error: error.message,\n    fallbackData: {}\n  };\n}\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#debugging","title":"\ud83d\udd0d Debugging","text":""},{"location":"blocks/built-in/jsrunner/#logging-and-debugging","title":"Logging and Debugging","text":"<pre><code>// Debug JavaScript execution\nconsole.log('Input params:', params);\nconsole.log('Context variables:', Object.keys(context.vars));\nconsole.log('Current route:', context.route);\n\n// Step-by-step debugging\nfunction debugStep(step, data) {\n  console.log(`Step ${step}:`, data);\n  return data;\n}\n\nconst result = debugStep(1, params)\n  .map(item =&gt; debugStep(2, item))\n  .filter(item =&gt; debugStep(3, item.active))\n  .reduce((acc, item) =&gt; debugStep(4, acc + item.value), 0);\n\nreturn result;\n</code></pre>"},{"location":"blocks/built-in/jsrunner/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// Monitor execution time\nconst startTime = Date.now();\n\ntry {\n  // Your complex logic here\n  const result = await complexOperation(params);\n\n  const executionTime = Date.now() - startTime;\n  console.log(`Execution time: ${executionTime}ms`);\n\n  return result;\n\n} catch (error) {\n  const executionTime = Date.now() - startTime;\n  console.error(`Execution failed after ${executionTime}ms:`, error);\n  throw error;\n}\n</code></pre> <p>The JavaScript Runner block provides unparalleled flexibility for implementing custom logic in your API workflows, making it possible to handle virtually any requirement that standard blocks cannot address.</p>"},{"location":"blocks/built-in/setvar/","title":"SetVar Block","text":""},{"location":"blocks/built-in/transformer/","title":"Transformer Block","text":"<p>The Transformer block provides powerful data transformation capabilities using field mapping. It allows you to restructure, rename, and reorganize data objects by defining mapping rules between input and output fields.</p>"},{"location":"blocks/built-in/transformer/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is designed for data transformation scenarios where you need to:</p> <ul> <li>Restructure API responses to match client expectations</li> <li>Rename fields for consistency</li> <li>Extract nested data into flat structures</li> <li>Transform data formats between systems</li> <li>Prepare data for downstream processing</li> </ul>"},{"location":"blocks/built-in/transformer/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/transformer/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>fieldMap</code> <code>object</code> \u2705 Mapping of output fields to input expressions <code>useJs</code> <code>boolean</code> \u274c Enable JavaScript mode for complex transformations <code>js</code> <code>string</code> \u26a0\ufe0f JavaScript code when useJs is true"},{"location":"blocks/built-in/transformer/#field-mapping-format","title":"Field Mapping Format","text":"<pre><code>{\n  \"fieldMap\": {\n    \"outputField1\": \"inputField1\",\n    \"outputField2\": \"inputField2.nestedField\",\n    \"outputField3\": \"js:transformFunction(inputField3)\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Input Validation: Validates field mapping and input data</li> <li>Mode Selection: Chooses between mapping mode or JavaScript mode</li> <li>Field Processing: Processes each field according to mapping rules</li> <li>JavaScript Evaluation: Evaluates JavaScript expressions when needed</li> <li>Output Construction: Builds transformed output object</li> </ol>"},{"location":"blocks/built-in/transformer/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/transformer/#basic-field-mapping","title":"Basic Field Mapping","text":"<pre><code>{\n  \"fieldMap\": {\n    \"userId\": \"id\",\n    \"fullName\": \"name\",\n    \"emailAddress\": \"contact.email\",\n    \"accountStatus\": \"status\"\n  }\n}\n</code></pre> <p>Input: <pre><code>{\n  \"id\": 123,\n  \"name\": \"John Doe\",\n  \"contact\": {\n    \"email\": \"john@example.com\",\n    \"phone\": \"555-0123\"\n  },\n  \"status\": \"active\"\n}\n</code></pre></p> <p>Output: <pre><code>{\n  \"userId\": 123,\n  \"fullName\": \"John Doe\",\n  \"emailAddress\": \"john@example.com\",\n  \"accountStatus\": \"active\"\n}\n</code></pre></p>"},{"location":"blocks/built-in/transformer/#javascript-transformations","title":"JavaScript Transformations","text":"<pre><code>{\n  \"useJs\": true,\n  \"js\": \"return { ...params, computedField: params.value * 2, timestamp: new Date().toISOString() }\"\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#complex-mapping-with-expressions","title":"Complex Mapping with Expressions","text":"<pre><code>{\n  \"fieldMap\": {\n    \"id\": \"user.id\",\n    \"displayName\": \"js:`${params.user.firstName} ${params.user.lastName}`\",\n    \"isActive\": \"js:params.user.status === 'active'\",\n    \"profileUrl\": \"js:`/users/${params.user.id}/profile`\",\n    \"tags\": \"user.tags\",\n    \"lastLogin\": \"activity.lastLogin\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/transformer/#input","title":"Input","text":"<ul> <li>Target: Receives input data object to transform</li> </ul>"},{"location":"blocks/built-in/transformer/#output","title":"Output","text":"<ul> <li>Source: Sends transformed data to next block</li> <li>Success: Executes when transformation completes successfully</li> <li>Error: Executes when transformation fails</li> </ul>"},{"location":"blocks/built-in/transformer/#transformation-modes","title":"\ud83d\udd00 Transformation Modes","text":""},{"location":"blocks/built-in/transformer/#field-mapping-mode-default","title":"Field Mapping Mode (Default)","text":"<ul> <li>Uses dot notation for nested field access</li> <li>Supports JavaScript expressions with <code>js:</code> prefix</li> <li>Maintains original data types</li> <li>Validates field existence</li> </ul>"},{"location":"blocks/built-in/transformer/#javascript-mode","title":"JavaScript Mode","text":"<ul> <li>Executes custom JavaScript code</li> <li>Full access to input data as <code>params</code></li> <li>Complete control over output structure</li> <li>Supports complex transformations</li> </ul>"},{"location":"blocks/built-in/transformer/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/transformer/#api-response-normalization","title":"API Response Normalization","text":"<pre><code>// Transform external API response to internal format\n{\n  \"fieldMap\": {\n    \"id\": \"external_id\",\n    \"name\": \"full_name\",\n    \"email\": \"contact_info.email\",\n    \"createdAt\": \"registration_date\",\n    \"isVerified\": \"verification_status\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#data-flattening","title":"Data Flattening","text":"<pre><code>// Flatten nested structure\n{\n  \"fieldMap\": {\n    \"userId\": \"user.id\",\n    \"userName\": \"user.name\",\n    \"companyName\": \"user.company.name\",\n    \"companyId\": \"user.company.id\",\n    \"role\": \"user.role\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#computed-fields","title":"Computed Fields","text":"<pre><code>// Add computed fields\n{\n  \"fieldMap\": {\n    \"id\": \"id\",\n    \"name\": \"name\",\n    \"fullAddress\": \"js:`${params.street}, ${params.city}, ${params.country}`\",\n    \"isAdult\": \"js:params.age &gt;= 18\",\n    \"category\": \"js:getCategory(params.score)\",\n    \"processedAt\": \"js:new Date().toISOString()\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#data-filtering","title":"Data Filtering","text":"<pre><code>// Filter and transform data\n{\n  \"fieldMap\": {\n    \"activeUsers\": \"js:params.users.filter(u =&gt; u.status === 'active')\",\n    \"totalUsers\": \"js:params.users.length\",\n    \"adminUsers\": \"js:params.users.filter(u =&gt; u.role === 'admin')\",\n    \"userNames\": \"js:params.users.map(u =&gt; u.name)\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/transformer/#field-mapping","title":"Field Mapping","text":"<ul> <li>Use descriptive output field names</li> <li>Validate input data structure before mapping</li> <li>Handle optional fields gracefully</li> <li>Use consistent naming conventions</li> </ul>"},{"location":"blocks/built-in/transformer/#javascript-expressions","title":"JavaScript Expressions","text":"<ul> <li>Keep expressions simple and readable</li> <li>Test expressions thoroughly</li> <li>Handle edge cases and null values</li> <li>Use helper functions for complex logic</li> </ul>"},{"location":"blocks/built-in/transformer/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Avoid complex computations in mappings</li> <li>Cache expensive operations when possible</li> <li>Minimize JavaScript execution for high-volume requests</li> <li>Profile transformation performance</li> </ul>"},{"location":"blocks/built-in/transformer/#error-handling","title":"Error Handling","text":"<ul> <li>Validate input data before transformation</li> <li>Provide meaningful error messages</li> <li>Handle missing or malformed data</li> <li>Use fallback values for optional fields</li> </ul>"},{"location":"blocks/built-in/transformer/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>JavaScript Runner: Alternative for complex transformations</li> <li>Set Variable: Store transformation results</li> <li>Get Variable: Access data for transformation</li> <li>Array Operations: Transform array data</li> <li>If: Conditional transformations</li> </ul>"},{"location":"blocks/built-in/transformer/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/transformer/#input-schema","title":"Input Schema","text":"<pre><code>{\n  fieldMap?: Record&lt;string, string&gt;,\n  useJs?: boolean,\n  js?: string\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,\n  output: any,           // Transformed data object\n  next?: string,\n  error?: string,        // Error message if transformation fails\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#field-mapping-syntax","title":"Field Mapping Syntax","text":""},{"location":"blocks/built-in/transformer/#dot-notation","title":"Dot Notation","text":"<pre><code>// Access nested properties\n\"user.name\"        // params.user.name\n\"user.company.name\" // params.user.company.name\n\"items[0].name\"    // params.items[0].name\n</code></pre>"},{"location":"blocks/built-in/transformer/#javascript-expressions_1","title":"JavaScript Expressions","text":"<pre><code>// Use js: prefix for expressions\n\"js:params.value * 2\"                    // Mathematical operations\n\"js:params.status === 'active'\"          // Boolean expressions\n\"js:new Date(params.createdAt)\"          // Date operations\n\"js:params.tags.join(', ')\"              // Array operations\n</code></pre>"},{"location":"blocks/built-in/transformer/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/transformer/#conditional-mapping","title":"Conditional Mapping","text":"<pre><code>{\n  \"fieldMap\": {\n    \"id\": \"id\",\n    \"name\": \"name\",\n    \"status\": \"status\",\n    \"metadata\": \"js:params.status === 'active' ? params.metadata : null\",\n    \"lastActive\": \"js:params.status === 'active' ? params.lastLogin : null\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#array-transformations","title":"Array Transformations","text":"<pre><code>{\n  \"fieldMap\": {\n    \"userIds\": \"js:params.users.map(u =&gt; u.id)\",\n    \"activeUsers\": \"js:params.users.filter(u =&gt; u.status === 'active')\",\n    \"userSummary\": \"js:params.users.map(u =&gt; ({ id: u.id, name: u.name }))\",\n    \"totalActive\": \"js:params.users.filter(u =&gt; u.status === 'active').length\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#type-conversion","title":"Type Conversion","text":"<pre><code>{\n  \"fieldMap\": {\n    \"id\": \"js:parseInt(params.id)\",\n    \"price\": \"js:parseFloat(params.price)\",\n    \"isActive\": \"js:Boolean(params.isActive)\",\n    \"tags\": \"js:Array.isArray(params.tags) ? params.tags : [params.tags]\",\n    \"createdAt\": \"js:new Date(params.createdAt)\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#template-processing","title":"Template Processing","text":"<pre><code>{\n  \"fieldMap\": {\n    \"welcomeMessage\": \"js:`Welcome ${params.user.name}!`\",\n    \"profileUrl\": \"js:`/users/${params.user.id}/profile`\",\n    \"apiEndpoint\": \"js:`${params.baseUrl}/api/v1/users/${params.user.id}`\",\n    \"formattedDate\": \"js:new Date(params.createdAt).toLocaleDateString()\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#error-handling_1","title":"\u26a0\ufe0f Error Handling","text":""},{"location":"blocks/built-in/transformer/#common-issues","title":"Common Issues","text":"<p>Missing Input Fields <pre><code>// Problematic: field doesn't exist\n{\n  \"fieldMap\": {\n    \"name\": \"user.name\"  // Error if params.user is undefined\n  }\n}\n\n// Fixed: add null checking\n{\n  \"fieldMap\": {\n    \"name\": \"js:params.user?.name || 'Unknown'\"\n  }\n}\n</code></pre></p> <p>Invalid JavaScript Expressions <pre><code>// Problematic: syntax error\n{\n  \"fieldMap\": {\n    \"result\": \"js:params.value +\"  // Incomplete expression\n  }\n}\n\n// Fixed: complete expression\n{\n  \"fieldMap\": {\n    \"result\": \"js:params.value + 10\"\n  }\n}\n</code></pre></p> <p>Type Mismatches <pre><code>// Problematic: wrong data type\n{\n  \"fieldMap\": {\n    \"count\": \"js:params.items.length\"  // Error if params.items is not array\n  }\n}\n\n// Fixed: type checking\n{\n  \"fieldMap\": {\n    \"count\": \"js:Array.isArray(params.items) ? params.items.length : 0\"\n  }\n}\n</code></pre></p>"},{"location":"blocks/built-in/transformer/#error-recovery","title":"Error Recovery","text":"<pre><code>// Implement safe transformations\n{\n  \"fieldMap\": {\n    \"id\": \"js:params.id || 'unknown'\",\n    \"name\": \"js:params.name || 'Unnamed'\",\n    \"email\": \"js:params.contact?.email || params.email || 'no-email@example.com'\",\n    \"status\": \"js:params.status || 'inactive'\",\n    \"score\": \"js:typeof params.score === 'number' ? params.score : 0\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#debugging","title":"\ud83d\udd0d Debugging","text":""},{"location":"blocks/built-in/transformer/#testing-transformations","title":"Testing Transformations","text":"<pre><code>// Test with sample data\nconst sampleInput = {\n  user: {\n    id: 123,\n    name: \"John Doe\",\n    email: \"john@example.com\"\n  },\n  status: \"active\",\n  score: 85\n};\n\n// Test field mappings\nconst testMappings = {\n  \"userId\": \"user.id\",\n  \"userName\": \"user.name\",\n  \"isActive\": \"js:params.status === 'active'\",\n  \"grade\": \"js:params.score &gt;= 90 ? 'A' : params.score &gt;= 80 ? 'B' : 'C'\"\n};\n</code></pre>"},{"location":"blocks/built-in/transformer/#logging-transformations","title":"Logging Transformations","text":"<pre><code>// Add logging to transformations\n{\n  \"fieldMap\": {\n    \"id\": \"id\",\n    \"name\": \"name\",\n    \"processedName\": \"js:console.log('Processing:', params.name) || params.name.toUpperCase()\",\n    \"timestamp\": \"js:new Date().toISOString()\"\n  }\n}\n</code></pre>"},{"location":"blocks/built-in/transformer/#validation-checks","title":"Validation Checks","text":"<pre><code>// Validate transformation results\n{\n  \"fieldMap\": {\n    \"id\": \"js:validateId(params.id)\",\n    \"email\": \"js:validateEmail(params.email)\",\n    \"age\": \"js:validateAge(params.age)\",\n    \"isValid\": \"js:validateId(params.id) &amp;&amp; validateEmail(params.email) &amp;&amp; validateAge(params.age)\"\n  }\n}\n</code></pre> <p>The Transformer block provides flexible and powerful data transformation capabilities, making it easy to restructure data to match your API requirements and prepare information for downstream processing.</p>"},{"location":"blocks/built-in/http/httpGetCookie/","title":"Get HTTP Cookie Block","text":"<p>Retrieves cookie values from HTTP requests.</p>"},{"location":"blocks/built-in/http/httpGetCookie/#configuration","title":"\u2699\ufe0f Configuration","text":"Parameter Type Required Description <code>name</code> <code>string</code> \u2705 Cookie name"},{"location":"blocks/built-in/http/httpGetCookie/#example","title":"\ud83d\udcdd Example","text":"<pre><code>{\n  \"name\": \"sessionId\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetCookie/#use-cases","title":"\ud83c\udfa8 Use Cases","text":"<ul> <li>Session management: <code>sessionId=abc123</code></li> <li>User preferences: <code>theme=dark&amp;lang=en</code></li> <li>Authentication: <code>authToken=xyz789</code></li> </ul>"},{"location":"blocks/built-in/http/httpGetCookie/#api-reference","title":"\ud83d\udcda API Reference","text":"<p>```typescript // Input {   name: string }</p> <p>// Output {   successful: boolean,   output: string,   next?: string,   continueIfFail: boolean }</p>"},{"location":"blocks/built-in/http/httpGetHeader/","title":"Get HTTP Header Block","text":"<p>The Get HTTP Header block extracts header values from incoming HTTP requests. It allows you to access standard and custom headers sent by clients in their request.</p>"},{"location":"blocks/built-in/http/httpGetHeader/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block is designed to retrieve HTTP header information from requests, which is essential for:</p> <ul> <li>Authentication and authorization (Bearer tokens, API keys)</li> <li>Content negotiation (Accept, Content-Type)</li> <li>Client identification (User-Agent, X-Client-ID)</li> <li>Request metadata (X-Request-ID, X-Correlation-ID)</li> <li>Custom application headers</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"blocks/built-in/http/httpGetHeader/#input-parameters","title":"Input Parameters","text":"Parameter Type Required Description <code>name</code> <code>string</code> \u2705 Name of the header to retrieve"},{"location":"blocks/built-in/http/httpGetHeader/#input-schema","title":"Input Schema","text":"<pre><code>{\n  name: string\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Header Name Validation: Validates that header name is provided</li> <li>Header Retrieval: Looks up header value from request</li> <li>Value Processing: Returns header value or empty string if not found</li> <li>Output Generation: Sends header value to next block</li> </ol>"},{"location":"blocks/built-in/http/httpGetHeader/#example-usage","title":"\ud83d\udcdd Example Usage","text":""},{"location":"blocks/built-in/http/httpGetHeader/#basic-header-retrieval","title":"Basic Header Retrieval","text":"<pre><code>{\n  \"name\": \"Authorization\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#custom-header-access","title":"Custom Header Access","text":"<pre><code>{\n  \"name\": \"X-API-Key\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#content-type-checking","title":"Content Type Checking","text":"<pre><code>{\n  \"name\": \"Content-Type\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#connections","title":"\ud83d\udd17 Connections","text":""},{"location":"blocks/built-in/http/httpGetHeader/#input","title":"Input","text":"<ul> <li>Target: Receives input data (not used for header retrieval)</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#output","title":"Output","text":"<ul> <li>Source: Sends header value to next block</li> <li>Success: Always executes (header retrieval doesn't fail)</li> <li>Error: Never executes (block always succeeds)</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#common-http-headers","title":"\ud83c\udf10 Common HTTP Headers","text":""},{"location":"blocks/built-in/http/httpGetHeader/#authentication-headers","title":"Authentication Headers","text":"Header Purpose Example <code>Authorization</code> Bearer tokens, Basic auth <code>Bearer eyJ...</code> <code>X-API-Key</code> API key authentication <code>abc123def456</code> <code>X-Auth-Token</code> Custom auth tokens <code>session_12345</code>"},{"location":"blocks/built-in/http/httpGetHeader/#content-headers","title":"Content Headers","text":"Header Purpose Example <code>Content-Type</code> Request body format <code>application/json</code> <code>Accept</code> Preferred response format <code>application/json</code> <code>Content-Length</code> Request body size <code>1024</code>"},{"location":"blocks/built-in/http/httpGetHeader/#client-information","title":"Client Information","text":"Header Purpose Example <code>User-Agent</code> Client application info <code>Mozilla/5.0 ...</code> <code>X-Client-ID</code> Client identifier <code>web-app-v2.1</code> <code>X-Client-Version</code> Client version <code>2.1.0</code>"},{"location":"blocks/built-in/http/httpGetHeader/#request-metadata","title":"Request Metadata","text":"Header Purpose Example <code>X-Request-ID</code> Unique request identifier <code>req_12345</code> <code>X-Correlation-ID</code> Request correlation ID <code>corr_67890</code> <code>X-Forwarded-For</code> Original client IP <code>192.168.1.100</code>"},{"location":"blocks/built-in/http/httpGetHeader/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/http/httpGetHeader/#bearer-token-authentication","title":"Bearer Token Authentication","text":"<pre><code>// Extract Bearer token\n{\n  \"name\": \"Authorization\"\n}\n// Result: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#api-key-validation","title":"API Key Validation","text":"<pre><code>// Get API key from custom header\n{\n  \"name\": \"X-API-Key\"\n}\n// Result: \"sk_live_1234567890abcdef\"\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#content-negotiation","title":"Content Negotiation","text":"<pre><code>// Check requested content type\n{\n  \"name\": \"Accept\"\n}\n// Result: \"application/json, text/plain, */*\"\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#request-tracing","title":"Request Tracing","text":"<pre><code>// Get correlation ID for tracing\n{\n  \"name\": \"X-Correlation-ID\"\n}\n// Result: \"550e8400-e29b-41d4-a716-446655440000\"\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#client-identification","title":"Client Identification","text":"<pre><code>// Identify client application\n{\n  \"name\": \"X-Client-ID\"\n}\n// Result: \"mobile-app-ios\"\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#best-practices","title":"\ud83d\udd27 Best Practices","text":""},{"location":"blocks/built-in/http/httpGetHeader/#header-name-conventions","title":"Header Name Conventions","text":"<ul> <li>Use standard HTTP header names when possible</li> <li>Prefix custom headers with <code>X-</code> (deprecated but still common)</li> <li>Use kebab-case for multi-word header names</li> <li>Be consistent across your API</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#security-considerations","title":"Security Considerations","text":"<ul> <li>Don't log sensitive header values</li> <li>Validate header content before processing</li> <li>Use HTTPS to prevent header tampering</li> <li>Implement proper authentication checks</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Header access is very fast (no I/O operations)</li> <li>Cache frequently accessed header values if needed</li> <li>Avoid unnecessary header processing</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#error-handling","title":"Error Handling","text":"<ul> <li>Handle missing headers gracefully</li> <li>Provide default values when appropriate</li> <li>Validate header format and content</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>Set HTTP Header: Set response headers</li> <li>Get HTTP Param: Access URL parameters</li> <li>Get HTTP Cookie: Access cookie values</li> <li>Get Request Body: Access request body</li> <li>If: Make decisions based on header values</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"blocks/built-in/http/httpGetHeader/#input-schema_1","title":"Input Schema","text":"<pre><code>{\n  name: string\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#output-schema","title":"Output Schema","text":"<pre><code>{\n  successful: boolean,     // Always true\n  output: string,          // Header value or empty string\n  next?: string,\n  continueIfFail: boolean // Always true\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#header-name-rules","title":"Header Name Rules","text":"<ul> <li>Case-Insensitive: <code>authorization</code> \u2261 <code>Authorization</code> \u2261 <code>AUTHORIZATION</code></li> <li>Standard Names: Use registered HTTP header names when possible</li> <li>Custom Names: Prefix with <code>X-</code> for application-specific headers</li> <li>Validation: Header names should not contain control characters</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"blocks/built-in/http/httpGetHeader/#multi-value-headers","title":"Multi-Value Headers","text":"<pre><code>// Handle headers with multiple values\n{\n  \"name\": \"Accept\"\n}\n// Result: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#header-parsing","title":"Header Parsing","text":"<pre><code>// Parse complex header values\n{\n  \"name\": \"Authorization\"\n}\n// Use JavaScript Runner to parse:\n// const auth = params;\n// if (auth.startsWith('Bearer ')) {\n//   return auth.substring(7); // Extract token\n// }\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#header-validation","title":"Header Validation","text":"<pre><code>// Validate required headers\n{\n  \"name\": \"Authorization\"\n}\n// Use If block to check:\n// {\n//   \"conditions\": [\n//     {\n//       \"lhs\": \"js:params &amp;&amp; params.startsWith('Bearer ')\",\n//       \"rhs\": true,\n//       \"operator\": \"equals\"\n//     }\n//   ]\n// }\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#header-normalization","title":"Header Normalization","text":"<pre><code>// Normalize header values\n{\n  \"name\": \"content-type\"\n}\n// Use JavaScript Runner to normalize:\n// return params ? params.toLowerCase() : 'application/json';\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#security-considerations_1","title":"\u26a0\ufe0f Security Considerations","text":""},{"location":"blocks/built-in/http/httpGetHeader/#sensitive-headers","title":"Sensitive Headers","text":"<ul> <li>Authorization: Contains authentication credentials</li> <li>Cookie: May contain session data</li> <li>X-API-Key: Contains API access keys</li> <li>X-Auth-Token: Contains authentication tokens</li> </ul>"},{"location":"blocks/built-in/http/httpGetHeader/#best-practices_1","title":"Best Practices","text":"<pre><code>// Safe header logging\nconst headerValue = getHeader('Authorization');\nif (headerValue) {\n  // Log only the type, not the value\n  console.log('Auth header present:', headerValue.split(' ')[0]);\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#input-validation","title":"Input Validation","text":"<pre><code>// Validate header content\nconst apiKey = getHeader('X-API-Key');\nif (!apiKey || apiKey.length &lt; 10) {\n  throw new Error('Invalid API key');\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#debugging","title":"\ud83d\udd0d Debugging","text":""},{"location":"blocks/built-in/http/httpGetHeader/#header-inspection","title":"Header Inspection","text":"<pre><code>// Log all headers (for debugging only)\nconsole.log('All headers:', context.vars);\n\n// Log specific header\nconst userAgent = getHeader('User-Agent');\nconsole.log('User Agent:', userAgent);\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#header-existence-check","title":"Header Existence Check","text":"<pre><code>// Check if header exists\nconst hasAuth = !!getHeader('Authorization');\nconsole.log('Has auth header:', hasAuth);\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#header-value-analysis","title":"Header Value Analysis","text":"<pre><code>// Analyze header content\nconst contentType = getHeader('Content-Type');\nconsole.log('Content type:', contentType);\nconsole.log('Is JSON:', contentType?.includes('json'));\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#common-patterns","title":"\ud83d\udcca Common Patterns","text":""},{"location":"blocks/built-in/http/httpGetHeader/#authentication-flow","title":"Authentication Flow","text":"<pre><code>// 1. Get auth header\n{\n  \"name\": \"Authorization\"\n}\n// 2. Extract token (JavaScript Runner)\n// 3. Validate token (external API call)\n// 4. Set user context (Set Variable)\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#api-versioning","title":"API Versioning","text":"<pre><code>// Check API version\n{\n  \"name\": \"Accept-Version\"\n}\n// Default to v1 if not specified\n</code></pre>"},{"location":"blocks/built-in/http/httpGetHeader/#rate-limiting","title":"Rate Limiting","text":"<pre><code>// Get client identifier\n{\n  \"name\": \"X-Client-ID\"\n}\n// Use for rate limiting logic\n</code></pre> <p>The Get HTTP Header block provides essential access to HTTP request headers, enabling authentication, content negotiation, request tracing, and custom application logic based on client-provided metadata.</p>"},{"location":"blocks/built-in/http/httpGetParam/","title":"Get HTTP Parameter Block","text":"<p>Extracts route and query parameters from HTTP requests.</p>"},{"location":"blocks/built-in/http/httpGetParam/#configuration","title":"\u2699\ufe0f Configuration","text":"Parameter Type Required Description <code>name</code> <code>string</code> \u2705 Parameter name <code>source</code> <code>enum</code> \u2705 <code>query</code> or <code>path</code>"},{"location":"blocks/built-in/http/httpGetParam/#examples","title":"\ud83d\udcdd Examples","text":"<pre><code>// Query parameter\n{\n  \"name\": \"search\",\n  \"source\": \"query\"\n}\n\n// Route parameter\n{\n  \"name\": \"userId\",\n  \"source\": \"path\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetParam/#use-cases","title":"\ud83c\udfa8 Use Cases","text":"<ul> <li>Search queries: <code>?search=apple&amp;limit=10</code></li> <li>Resource IDs: <code>/users/{userId}/posts/{postId}</code></li> <li>Filtering: <code>?status=active&amp;category=tech</code></li> </ul>"},{"location":"blocks/built-in/http/httpGetParam/#api-reference","title":"\ud83d\udcda API Reference","text":"<p>```typescript // Input {   name: string,   source: \"query\" | \"path\" }</p> <p>// Output {   successful: boolean,   output: string,   next?: string,   continueIfFail: boolean }</p>"},{"location":"blocks/built-in/http/httpGetRequestBody/","title":"Get HTTP Request Body Block","text":"<p>Retrieves and parses the HTTP request body data.</p>"},{"location":"blocks/built-in/http/httpGetRequestBody/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block extracts the body content from HTTP requests, supporting various content types and automatic parsing.</p>"},{"location":"blocks/built-in/http/httpGetRequestBody/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>This block requires no configuration parameters.</p>"},{"location":"blocks/built-in/http/httpGetRequestBody/#example-usage","title":"\ud83d\udcdd Example Usage","text":"<pre><code>{}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetRequestBody/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Body Access: Retrieves raw request body</li> <li>Content-Type Detection: Identifies content type</li> <li>Automatic Parsing: Parses based on content type</li> <li>Data Output: Returns parsed data</li> </ol>"},{"location":"blocks/built-in/http/httpGetRequestBody/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/http/httpGetRequestBody/#json-api-requests","title":"JSON API Requests","text":"<pre><code>// Input: POST /api/users\n// Content-Type: application/json\n// Body: {\"name\": \"John\", \"email\": \"john@example.com\"}\n//\n// Output: { name: \"John\", email: \"john@example.com\" }\n</code></pre>"},{"location":"blocks/built-in/http/httpGetRequestBody/#form-data","title":"Form Data","text":"<pre><code>// Input: POST /api/upload\n// Content-Type: application/x-www-form-urlencoded\n// Body: name=John&amp;email=john@example.com\n//\n// Output: { name: \"John\", email: \"john@example.com\" }\n</code></pre>"},{"location":"blocks/built-in/http/httpGetRequestBody/#raw-text","title":"Raw Text","text":"<pre><code>// Input: POST /api/webhook\n// Content-Type: text/plain\n// Body: \"Hello World\"\n//\n// Output: \"Hello World\"\n</code></pre>"},{"location":"blocks/built-in/http/httpGetRequestBody/#api-reference","title":"\ud83d\udcda API Reference","text":"<pre><code>// Input\n{} // No parameters required\n\n// Output\n{\n  successful: boolean,\n  output: any,           // Parsed request body\n  next?: string,\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpGetRequestBody/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>Set Variable: Store request body data</li> <li>Transformer: Transform body data</li> <li>JavaScript Runner: Process body data</li> <li>If: Validate body content</li> </ul>"},{"location":"blocks/built-in/http/httpSetCookie/","title":"Set HTTP Cookie Block","text":"<p>Sets cookie values in HTTP responses with advanced options.</p>"},{"location":"blocks/built-in/http/httpSetCookie/#configuration","title":"\u2699\ufe0f Configuration","text":"Parameter Type Required Description <code>name</code> <code>string</code> \u2705 Cookie name <code>value</code> <code>string \\| number</code> \u2705 Cookie value <code>domain</code> <code>string</code> \u274c Cookie domain <code>path</code> <code>string</code> \u274c Cookie path <code>expiry</code> <code>string \\| Date</code> \u274c Expiration date <code>httpOnly</code> <code>boolean</code> \u274c HTTP-only flag <code>secure</code> <code>boolean</code> \u274c Secure flag <code>samesite</code> <code>enum</code> \u274c SameSite policy"},{"location":"blocks/built-in/http/httpSetCookie/#example","title":"\ud83d\udcdd Example","text":"<pre><code>{\n  \"name\": \"sessionId\",\n  \"value\": \"abc123\",\n  \"httpOnly\": true,\n  \"secure\": true,\n  \"samesite\": \"Strict\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpSetCookie/#use-cases","title":"\ud83c\udfa8 Use Cases","text":"<ul> <li>Session management: Secure session cookies</li> <li>User preferences: Theme, language settings</li> <li>Authentication: Auth tokens, refresh tokens</li> </ul>"},{"location":"blocks/built-in/http/httpSetCookie/#api-reference","title":"\ud83d\udcda API Reference","text":"<p>```typescript // Input {   name: string,   value: string | number,   domain?: string,   path?: string,   expiry?: string | Date,   httpOnly?: boolean,   secure?: boolean,   samesite?: \"Strict\" | \"Lax\" | \"None\" }</p> <p>// Output {   successful: boolean,   output: any,   next?: string,   continueIfFail: boolean }</p>"},{"location":"blocks/built-in/http/httpSetHeader/","title":"Set HTTP Header Block","text":"<p>The Set HTTP Header block sets header values in HTTP responses. It allows you to control response headers sent back to clients.</p>"},{"location":"blocks/built-in/http/httpSetHeader/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This block enables you to set HTTP response headers for:</p> <ul> <li>Content type specification</li> <li>CORS configuration</li> <li>Authentication challenges</li> <li>Custom application headers</li> <li>Response metadata</li> </ul>"},{"location":"blocks/built-in/http/httpSetHeader/#configuration","title":"\u2699\ufe0f Configuration","text":"Parameter Type Required Description <code>name</code> <code>string</code> \u2705 Header name to set <code>value</code> <code>string</code> \u2705 Header value to set"},{"location":"blocks/built-in/http/httpSetHeader/#example-usage","title":"\ud83d\udcdd Example Usage","text":"<pre><code>{\n  \"name\": \"Content-Type\",\n  \"value\": \"application/json\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpSetHeader/#execution-flow","title":"\ud83d\udd04 Execution Flow","text":"<ol> <li>Parameter Validation: Validates header name and value</li> <li>Header Setting: Sets header in response</li> <li>Flow Continuation: Passes input data unchanged</li> </ol>"},{"location":"blocks/built-in/http/httpSetHeader/#use-cases","title":"\ud83c\udfa8 Use Cases","text":""},{"location":"blocks/built-in/http/httpSetHeader/#content-type-setting","title":"Content Type Setting","text":"<pre><code>{\n  \"name\": \"Content-Type\",\n  \"value\": \"application/json\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpSetHeader/#cors-headers","title":"CORS Headers","text":"<pre><code>{\n  \"name\": \"Access-Control-Allow-Origin\",\n  \"value\": \"*\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpSetHeader/#authentication","title":"Authentication","text":"<pre><code>{\n  \"name\": \"WWW-Authenticate\",\n  \"value\": \"Bearer realm=\\\"api\\\"\"\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpSetHeader/#api-reference","title":"\ud83d\udcda API Reference","text":"<pre><code>// Input\n{\n  name: string,\n  value: string\n}\n\n// Output\n{\n  successful: boolean,\n  output: any,\n  next?: string,\n  continueIfFail: boolean\n}\n</code></pre>"},{"location":"blocks/built-in/http/httpSetHeader/#related-blocks","title":"\ud83d\udd17 Related Blocks","text":"<ul> <li>Get HTTP Header: Read request headers</li> <li>Set HTTP Cookie: Set response cookies</li> </ul>"},{"location":"concepts/context/","title":"Request Context &amp; Variables","text":"<p>The request context is the central data structure that holds all information about an API request throughout its lifecycle. It provides access to HTTP data, custom variables, and utility functions that can be used by any block in your workflow.</p>"},{"location":"concepts/context/#context-architecture","title":"\ud83c\udfd7\ufe0f Context Architecture","text":"<p>The context consists of several key components:</p> <ul> <li>HTTP Data: Request parameters, headers, body, and metadata</li> <li>Custom Variables: User-defined data stored during workflow execution</li> <li>Utility Functions: Helper methods for common operations</li> <li>JavaScript VM: Isolated execution environment for custom code</li> </ul>"},{"location":"concepts/context/#http-context-data","title":"\ud83c\udf10 HTTP Context Data","text":""},{"location":"concepts/context/#request-information","title":"Request Information","text":"Property Type Description Example <code>httpRequestMethod</code> <code>string</code> HTTP method <code>\"GET\"</code>, <code>\"POST\"</code>, <code>\"PUT\"</code>, <code>\"DELETE\"</code> <code>httpRequestRoute</code> <code>string</code> Request path <code>\"/api/users/123\"</code> <code>httpRequestQuery</code> <code>object</code> Query parameters <code>{search: \"john\", limit: \"10\"}</code>"},{"location":"concepts/context/#request-data-access","title":"Request Data Access","text":"Method Parameters Returns Description <code>getQueryParam(key)</code> <code>string</code> <code>string</code> Get query parameter value <code>getRouteParam(key)</code> <code>string</code> <code>string</code> Get route parameter value <code>getHeader(key)</code> <code>string</code> <code>string</code> Get request header value <code>getCookie(key)</code> <code>string</code> <code>string</code> Get cookie value <code>getRequestBody()</code> <code>any</code> Request body data Parse and return request body"},{"location":"concepts/context/#response-manipulation","title":"Response Manipulation","text":"Method Parameters Returns Description <code>setHeader(key, value)</code> <code>string</code>, <code>string</code> <code>void</code> Set response header <code>setCookie(name, options)</code> <code>string</code>, <code>object</code> <code>void</code> Set response cookie"},{"location":"concepts/context/#app-config","title":"App Config","text":"Method Parameters Returns Description <code>getConfig(key)</code> <code>string</code> <code>string</code> Gets the config value"},{"location":"concepts/context/#custom-variables","title":"\ud83d\udcbe Custom Variables","text":"<p>Variables allow you to store and retrieve data throughout the request lifecycle:</p>"},{"location":"concepts/context/#variable-operations","title":"Variable Operations","text":"<pre><code>// Store data (globally accessible)\nuserId = 123;\nuserProfile = { name: 'John', email: 'john@example.com' };\n\n// Retrieve data (globally accessible)\nconst currentUserId = userId;\nconst profile = userProfile;\n</code></pre>"},{"location":"concepts/context/#variable-scope","title":"Variable Scope","text":"<ul> <li>Request-level: Variables persist throughout the entire request</li> <li>Block-accessible: Any block can read/write variables</li> <li>Type-flexible: Store any JavaScript data type</li> </ul>"},{"location":"concepts/context/#javascript-vm-integration","title":"\ud83d\udd27 JavaScript VM Integration","text":"<p>The context includes an isolated JavaScript VM for executing custom code:</p> <pre><code>// Access context data in JavaScript blocks (globally accessible)\nconst userId = userData;  // Variables are globally accessible\nconst searchTerm = getQueryParam('search');\nconst authToken = getHeader('Authorization');\n\n// Perform operations\nconst processedData = {\n  id: userId,\n  search: searchTerm,\n  timestamp: new Date().toISOString()\n};\n\n// Store result (globally accessible)\nprocessedResult = processedData;\n</code></pre>"},{"location":"concepts/context/#usage-examples","title":"\ud83d\udcdd Usage Examples","text":""},{"location":"concepts/context/#basic-data-extraction","title":"Basic Data Extraction","text":"<pre><code>// Extract user ID from route parameter\nconst userId = getRouteParam('userId');\n\n// Get search query from URL parameters\nconst searchQuery = getQueryParam('search');\n\n// Retrieve authentication token\nconst authToken = getHeader('Authorization');\n\n// Parse request body\nconst requestData = getRequestBody();\n</code></pre>"},{"location":"concepts/context/#response-configuration","title":"Response Configuration","text":"<pre><code>// Set response headers\nsetHeader('Content-Type', 'application/json');\nsetHeader('Cache-Control', 'no-cache');\n\n// Set cookies\nsetCookie('sessionId', {\n  value: 'abc123',\n  httpOnly: true,\n  secure: true,\n  maxAge: 3600\n});\n</code></pre>"},{"location":"concepts/context/#variable-management","title":"Variable Management","text":"<pre><code>// Store user data (globally accessible)\ncurrentUser = {\n  id: getRouteParam('userId'),\n  authenticated: true,\n  permissions: ['read', 'write']\n};\n\n// Process data (globally accessible)\nconst user = currentUser;\nconst canWrite = user.permissions.includes('write');\n\n// Store processing result (globally accessible)\nprocessingComplete = true;\n</code></pre>"},{"location":"concepts/context/#context-in-blocks","title":"\ud83d\udd17 Context in Blocks","text":""},{"location":"concepts/context/#accessing-context-in-custom-blocks","title":"Accessing Context in Custom Blocks","text":"<pre><code>import { BaseBlock, BlockOutput } from \"../baseBlock\";\n\nexport class CustomBlock extends BaseBlock {\n  async executeAsync(params?: any): Promise&lt;BlockOutput&gt; {\n    // Access context data (globally accessible in JavaScript blocks)\n    // Note: In custom TypeScript blocks, use this.context.vars\n    const userId = this.context.vars.userId;\n    const searchParam = this.context.vars.getQueryParam('search');\n\n    // Perform operations\n    const result = processData(userId, searchParam);\n\n    return {\n      successful: true,\n      output: result,\n      next: this.next\n    };\n  }\n}\n</code></pre>"},{"location":"concepts/context/#javascript-runner-block","title":"JavaScript Runner Block","text":"<pre><code>// Full context access in JavaScript blocks\nconst userId = getRouteParam('userId');\nconst search = getQueryParam('search');\nconst body = getRequestBody();\n\n// Complex processing\nconst result = await fetch(`/api/users/${userId}`)\n  .then(res =&gt; res.json())\n  .then(user =&gt; ({\n    ...user,\n    searchTerm: search,\n    processedAt: new Date().toISOString()\n  }));\n\n// Store result\ncontext.vars.apiResult = result;\n\n// Set response\nsetHeader('X-Processed-By', 'ConfigurableBackend');\n</code></pre>"},{"location":"concepts/context/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"concepts/context/#input-validation","title":"Input Validation","text":"<ul> <li>Always validate input parameters before use</li> <li>Sanitize data from external sources</li> <li>Use parameterized queries for database operations</li> </ul>"},{"location":"concepts/context/#variable-safety","title":"Variable Safety","text":"<ul> <li>Avoid storing sensitive data in variables</li> <li>Clear sensitive variables after use</li> <li>Validate variable data types</li> </ul>"},{"location":"concepts/context/#javascript-execution","title":"JavaScript Execution","text":"<ul> <li>JavaScript code runs in isolated VM</li> <li>Limited access to Node.js APIs</li> <li>Timeout protection for long-running scripts</li> </ul>"},{"location":"concepts/context/#advanced-patterns","title":"\ud83d\ude80 Advanced Patterns","text":""},{"location":"concepts/context/#context-sharing-between-blocks","title":"Context Sharing Between Blocks","text":"<pre><code>// Block 1: Extract and validate data\nconst userId = getRouteParam('userId');\nif (!userId || !/^\\d+$/.test(userId)) {\n  throw new Error('Invalid user ID');\n}\nvalidatedUserId = parseInt(userId);  // Globally accessible\n\n// Block 2: Use validated data\nconst userId = validatedUserId;  // Globally accessible\n// Safe to use - already validated\n</code></pre>"},{"location":"concepts/context/#conditional-processing","title":"Conditional Processing","text":"<pre><code>// Check authentication\nconst authHeader = getHeader('Authorization');\nif (authHeader &amp;&amp; authHeader.startsWith('Bearer ')) {\n  authenticated = true;  // Globally accessible\n  token = authHeader.substring(7);  // Globally accessible\n} else {\n  authenticated = false;  // Globally accessible\n}\n\n// Later blocks can check authentication status\nif (!authenticated) {  // Globally accessible\n  setHeader('WWW-Authenticate', 'Bearer');\n  // Return 401 response\n}\n</code></pre>"},{"location":"concepts/context/#data-transformation-pipeline","title":"Data Transformation Pipeline","text":"<pre><code>// Block 1: Parse input\nconst rawData = getRequestBody();\nrawInput = rawData;  // Globally accessible\n\n// Block 2: Validate and clean\nconst cleaned = validateAndClean(rawInput);  // Globally accessible\ncleanedData = cleaned;  // Globally accessible\n\n// Block 3: Transform\nconst transformed = transformData(cleanedData);  // Globally accessible\nfinalResult = transformed;  // Globally accessible\n\n// Block 4: Format response\nconst response = formatResponse(finalResult);  // Globally accessible\n// Return via Response block\n</code></pre>"},{"location":"concepts/context/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"concepts/context/#context-interface","title":"Context Interface","text":"<pre><code>interface Context {\n  vm: JsVM;\n  route: string;\n  apiId: string;\n  vars: ContextVarsType &amp; Record&lt;string, any&gt;;\n  requestBody?: any;\n}\n</code></pre>"},{"location":"concepts/context/#contextvarstype-methods","title":"ContextVarsType Methods","text":"<pre><code>interface ContextVarsType {\n  getQueryParam(key: string): string;\n  getRouteParam(key: string): string;\n  getHeader(key: string): string;\n  setHeader(key: string, value: string): void;\n  getCookie(key: string): string;\n  setCookie(name: string, value: any): void;\n  httpRequestMethod: string;\n  httpRequestRoute: string;\n  getRequestBody(): any;\n}\n</code></pre>"},{"location":"concepts/context/#related-topics","title":"\ud83d\udd17 Related Topics","text":"<ul> <li>JavaScript Runner Block: Execute custom JavaScript with full context access</li> <li>Set Variable Block: Store data in context variables</li> <li>Get Variable Block: Retrieve data from context variables</li> <li>HTTP Blocks: Access HTTP request/response data</li> </ul>"},{"location":"getting-started/installation/","title":"Installation &amp; Setup","text":"<p>This guide will help you get the Configurable Backend Engine up and running on your system. The engine consists of multiple components that work together to provide a complete low-code API development platform.</p>"},{"location":"getting-started/installation/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before installing, ensure you have the following:</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Node.js: Version 18.0.0 or higher</li> <li>npm: Version 8.0.0 or higher (comes with Node.js)</li> <li>PostgreSQL: Version 12.0 or higher</li> <li>Git: For cloning the repository</li> </ul>"},{"location":"getting-started/installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>RAM: Minimum 4GB, recommended 8GB+</li> <li>Storage: 500MB free space for installation</li> <li>CPU: Any modern processor (x64 architecture)</li> </ul>"},{"location":"getting-started/installation/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/07prajwal2000/Configurable-Backend-Engine.git\ncd Configurable-Backend-Engine\n</code></pre>"},{"location":"getting-started/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Install all dependencies (server, UI, and shared packages)\nnpm install\n</code></pre>"},{"location":"getting-started/installation/#3-database-setup","title":"3. Database Setup","text":"<pre><code># Create PostgreSQL database\ncreatedb configurable_backend\n\n# Or using psql\npsql -U postgres -c \"CREATE DATABASE configurable_backend;\"\n</code></pre>"},{"location":"getting-started/installation/#4-environment-configuration","title":"4. Environment Configuration","text":"<pre><code># Copy environment template\ncp .env.example .env\n\n# Edit .env file with your configuration\nnano .env\n</code></pre>"},{"location":"getting-started/installation/#5-database-migration","title":"5. Database Migration","text":"<pre><code># Run database migrations\nnpm run db:migrate\n</code></pre>"},{"location":"getting-started/installation/#6-start-development-server","title":"6. Start Development Server","text":"<pre><code># Start all services\nnpm run dev\n\n# Or start individual services\nnpm run dev:server  # Start backend server\nnpm run dev:ui      # Start UI development server\n</code></pre>"},{"location":"getting-started/installation/#7-access-the-application","title":"7. Access the Application","text":"<ul> <li>UI Editor: http://localhost:3000</li> <li>API Documentation: http://localhost:3001/_/admin/openapi/ui</li> <li>API Base URL: http://localhost:3001/_/admin</li> </ul>"},{"location":"getting-started/installation/#detailed-configuration","title":"\u2699\ufe0f Detailed Configuration","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the root directory with the following variables:</p> <pre><code># Database Configuration\nDATABASE_URL=\"postgresql://username:password@localhost:5432/configurable_backend\"\n\n# Server Configuration\nPORT=3001\nNODE_ENV=development\n\n# CORS Configuration\nCORS_ORIGIN=\"http://localhost:3000\"\n\n# JWT Configuration (if using authentication)\nJWT_SECRET=\"your-super-secret-jwt-key-here\"\n\n# File Upload Configuration\nUPLOAD_DIR=\"./uploads\"\nMAX_FILE_SIZE=10485760\n\n# Logging Configuration\nLOG_LEVEL=info\nLOG_FILE=\"./logs/app.log\"\n</code></pre>"},{"location":"getting-started/installation/#database-configuration","title":"Database Configuration","text":"<p>The application uses PostgreSQL with Drizzle ORM. Ensure your database user has the following permissions:</p> <pre><code>-- Grant necessary permissions\nGRANT ALL PRIVILEGES ON DATABASE configurable_backend TO your_user;\nGRANT ALL ON SCHEMA public TO your_user;\n</code></pre>"},{"location":"getting-started/installation/#port-configuration","title":"Port Configuration","text":"<p>By default, the services run on these ports: - UI: 3000 - Server: 3001 - Database: 5432 (PostgreSQL default)</p> <p>You can change these in the respective configuration files or environment variables.</p>"},{"location":"getting-started/installation/#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<p>After installation, your project structure should look like this:</p> <pre><code>Configurable-Backend-Engine/\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 server/          # Backend API server\n\u2502   \u2514\u2500\u2500 ui/             # Frontend editor\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 blocks/         # Block definitions and engine\n\u2502   \u2514\u2500\u2500 lib/            # Shared utilities\n\u251c\u2500\u2500 docs/               # Documentation\n\u251c\u2500\u2500 docker/             # Docker configuration\n\u251c\u2500\u2500 .env                # Environment variables\n\u251c\u2500\u2500 package.json        # Root package configuration\n\u2514\u2500\u2500 turbo.json         # Monorepo configuration\n</code></pre>"},{"location":"getting-started/installation/#docker-installation-alternative","title":"\ud83d\udc33 Docker Installation (Alternative)","text":"<p>If you prefer using Docker:</p>"},{"location":"getting-started/installation/#using-docker-compose","title":"Using Docker Compose","text":"<pre><code># Start all services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop services\ndocker-compose down\n</code></pre>"},{"location":"getting-started/installation/#manual-docker-setup","title":"Manual Docker Setup","text":"<pre><code># Build the application\ndocker build -t configurable-backend .\n\n# Run the container\ndocker run -p 3000:3000 -p 3001:3001 configurable-backend\n</code></pre>"},{"location":"getting-started/installation/#development-setup","title":"\ud83d\udd27 Development Setup","text":""},{"location":"getting-started/installation/#installing-development-dependencies","title":"Installing Development Dependencies","text":"<pre><code># Install additional dev tools\nnpm install -g @types/node typescript nodemon\n</code></pre>"},{"location":"getting-started/installation/#setting-up-vs-code","title":"Setting up VS Code","text":"<ol> <li>Install recommended extensions:</li> <li>TypeScript and JavaScript Language Features</li> <li>Prettier - Code formatter</li> <li> <p>ESLint</p> </li> <li> <p>Configure workspace settings: <pre><code>{\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n}\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run specific test suite\nnpm test -- --testPathPattern=blocks\n</code></pre>"},{"location":"getting-started/installation/#production-deployment","title":"\ud83d\ude80 Production Deployment","text":""},{"location":"getting-started/installation/#build-for-production","title":"Build for Production","text":"<pre><code># Build all packages\nnpm run build\n\n# Build specific package\nnpm run build:server\nnpm run build:ui\n</code></pre>"},{"location":"getting-started/installation/#environment-setup","title":"Environment Setup","text":"<pre><code># Set production environment\nexport NODE_ENV=production\nexport DATABASE_URL=\"postgresql://prod_user:prod_pass@prod_host:5432/prod_db\"\n</code></pre>"},{"location":"getting-started/installation/#process-management","title":"Process Management","text":"<pre><code># Using PM2\nnpm install -g pm2\npm2 start ecosystem.config.js\n\n# Or using systemd\nsudo cp configurable-backend.service /etc/systemd/system/\nsudo systemctl enable configurable-backend\nsudo systemctl start configurable-backend\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Check if PostgreSQL is running\nsudo systemctl status postgresql\n\n# Test database connection\npsql -U your_user -d configurable_backend -c \"SELECT 1;\"\n</code></pre>"},{"location":"getting-started/installation/#port-conflicts","title":"Port Conflicts","text":"<pre><code># Check what's using the ports\nlsof -i :3000\nlsof -i :3001\n\n# Kill process using port\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"getting-started/installation/#permission-issues","title":"Permission Issues","text":"<pre><code># Fix npm permissions\nsudo chown -R $(whoami) ~/.npm\nsudo chown -R $(whoami) /usr/local/lib/node_modules\n</code></pre>"},{"location":"getting-started/installation/#build-issues","title":"Build Issues","text":"<pre><code># Clear node_modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n\n# Clear build cache\nnpm run clean\nnpm run build\n</code></pre>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Check the docs folder</li> <li>Issues: Report bugs on GitHub Issues</li> <li>Discussions: Join community discussions on GitHub Discussions</li> </ul>"},{"location":"getting-started/installation/#system-requirements-check","title":"\ud83d\udccb System Requirements Check","text":"<p>Run this script to verify your system meets all requirements:</p> <pre><code>#!/bin/bash\necho \"Checking system requirements...\"\n\n# Check Node.js version\nnode_version=$(node -v | sed 's/v//')\nrequired_version=\"18.0.0\"\nif [ \"$(printf '%s\\n' \"$required_version\" \"$node_version\" | sort -V | head -n1)\" = \"$required_version\" ]; then\n    echo \"\u2705 Node.js version: $node_version\"\nelse\n    echo \"\u274c Node.js version $node_version is below required $required_version\"\nfi\n\n# Check npm version\nnpm_version=$(npm -v)\nrequired_npm=\"8.0.0\"\nif [ \"$(printf '%s\\n' \"$required_npm\" \"$npm_version\" | sort -V | head -n1)\" = \"$required_npm\" ]; then\n    echo \"\u2705 npm version: $npm_version\"\nelse\n    echo \"\u274c npm version $npm_version is below required $required_npm\"\nfi\n\n# Check PostgreSQL\nif command -v psql &amp;&gt; /dev/null; then\n    echo \"\u2705 PostgreSQL is installed\"\nelse\n    echo \"\u274c PostgreSQL is not installed\"\nfi\n\necho \"System check complete!\"\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>After successful installation:</p> <ol> <li>Explore the UI: Visit http://localhost:3000 to see the visual editor</li> <li>Read the Documentation: Check out block documentation</li> <li>Create Your First API: Follow the quick start guide</li> <li>Join the Community: Connect with other users and contributors</li> </ol>"},{"location":"getting-started/installation/#support","title":"\ud83d\udcde Support","text":"<ul> <li>Documentation: Full Documentation</li> <li>API Reference: OpenAPI Specification</li> <li>Community: GitHub Discussions</li> <li>Issues: GitHub Issues</li> </ul> <p>Happy coding with the Configurable Backend Engine! \ud83d\ude80</p>"}]}